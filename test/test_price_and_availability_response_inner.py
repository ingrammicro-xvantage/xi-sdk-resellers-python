# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from xi.sdk.resellers.models.price_and_availability_response_inner import PriceAndAvailabilityResponseInner

class TestPriceAndAvailabilityResponseInner(unittest.TestCase):
    """PriceAndAvailabilityResponseInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PriceAndAvailabilityResponseInner:
        """Test PriceAndAvailabilityResponseInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PriceAndAvailabilityResponseInner`
        """
        model = PriceAndAvailabilityResponseInner()
        if include_optional:
            return PriceAndAvailabilityResponseInner(
                index = 1.337,
                product_status_code = '',
                product_status_message = '',
                ingram_part_number = '',
                vendor_part_number = '',
                extended_vendor_part_number = '',
                customer_part_number = '',
                upc = '',
                part_number_type = '',
                vendor_number = '',
                vendor_name = '',
                description = '',
                product_class = '',
                uom = '',
                product_status = '',
                accept_back_order = True,
                product_authorized = True,
                returnable_product = True,
                end_user_info_required = True,
                govt_special_price_available = True,
                govt_program_type = '',
                govt_end_user_type = '',
                availability = xi.sdk.resellers.models.price_and_availability_response_inner_availability.PriceAndAvailabilityResponse_inner_availability(
                    available = True, 
                    total_availability = 56, 
                    availability_by_warehouse = [
                        xi.sdk.resellers.models.price_and_availability_response_inner_availability_availability_by_warehouse_inner.PriceAndAvailabilityResponse_inner_availability_availabilityByWarehouse_inner(
                            location = '', 
                            warehouse_id = '', 
                            quantity_available = 56, 
                            quantity_backordered = 56, 
                            quantity_backordered_eta = '', 
                            quantity_on_order = 56, 
                            back_order_info = [
                                xi.sdk.resellers.models.price_and_availability_response_inner_availability_availability_by_warehouse_inner_back_order_info_inner.PriceAndAvailabilityResponse_inner_availability_availabilityByWarehouse_inner_backOrderInfo_inner(
                                    quantity = 56, 
                                    eta_date = '', )
                                ], )
                        ], ),
                reserve_inventory_details = [
                    xi.sdk.resellers.models.price_and_availability_response_inner_reserve_inventory_details_inner.PriceAndAvailabilityResponse_inner_reserveInventoryDetails_inner(
                        quantity_reserved = 56, 
                        quantity_available = 56, 
                        effectivedate = '', 
                        expirydate = '', )
                    ],
                pricing = xi.sdk.resellers.models.price_and_availability_response_inner_pricing.PriceAndAvailabilityResponse_inner_pricing(
                    currency_code = '', 
                    retail_price = 1.337, 
                    map_price = 1.337, 
                    customer_price = 1.337, 
                    special_bid_pricing_available = True, 
                    web_discounts_available = True, ),
                discounts = [
                    xi.sdk.resellers.models.price_and_availability_response_inner_discounts_inner.PriceAndAvailabilityResponse_inner_discounts_inner(
                        special_pricing = [
                            xi.sdk.resellers.models.price_and_availability_response_inner_discounts_inner_special_pricing_inner.PriceAndAvailabilityResponse_inner_discounts_inner_specialPricing_inner(
                                discount_type = 'Special Bid, Promo Discount', 
                                special_bid_numer = '', 
                                special_pricing_discount = 1.337, 
                                special_pricing_effective_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                special_pricing_expiration_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                special_pricing_available_quantity = 56, 
                                special_pricing_min_quantity = 56, 
                                government_discount_type = '', 
                                government_discounted_customer_price = 1.337, )
                            ], 
                        quantity_discounts = [
                            xi.sdk.resellers.models.price_and_availability_response_inner_discounts_inner_quantity_discounts_inner.PriceAndAvailabilityResponse_inner_discounts_inner_quantityDiscounts_inner(
                                condition_type = 'Total fee', 
                                currency_code = '', 
                                currency_type = '', 
                                quantity = 56, 
                                amount = 1.337, )
                            ], )
                    ],
                bundle_part_indicator = True,
                service_fees = [
                    xi.sdk.resellers.models.price_and_availability_response_inner_service_fees_inner.PriceAndAvailabilityResponse_inner_serviceFees_inner(
                        condition_type = '', 
                        description = '', 
                        amount = 1.337, 
                        end_date = '', 
                        currency_code = '', )
                    ],
                subscription_price = [
                    xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner.PriceAndAvailabilityResponse_inner_subscriptionPrice_inner(
                        index = 1.337, 
                        plan_id = '', 
                        plan_uid = '', 
                        plan_name = '', 
                        plan_description = '', 
                        groups = [
                            xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_groups_inner.PriceAndAvailabilityResponse_inner_subscriptionPrice_inner_groups_inner(
                                group_name = '', 
                                group_description = '', )
                            ], 
                        billing_period = xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_billing_period.PriceAndAvailabilityResponse_inner_subscriptionPrice_inner_billingPeriod(
                            billing_period_unit = '', ), 
                        subscription_period = [
                            xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_subscription_period_inner.PriceAndAvailabilityResponse_inner_subscriptionPrice_inner_subscriptionPeriod_inner(
                                subscription_period_unit = '', )
                            ], 
                        options = [
                            xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_options_inner.PriceAndAvailabilityResponse_inner_subscriptionPrice_inner_options_inner(
                                resource_id = '', 
                                resource_uid = '', 
                                resource_name = '', 
                                vendor_part_number = '', 
                                min_units = 1.337, 
                                max_units = 1.337, 
                                recurringpricemodel = '', 
                                unit_of_measure = '', 
                                resource_pricing = [
                                    xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_options_inner_resource_pricing_inner.PriceAndAvailabilityResponse_inner_subscriptionPrice_inner_options_inner_resourcePricing_inner(
                                        name = '', 
                                        quantity = '', 
                                        msrp = 1.337, 
                                        unit_price = 1.337, 
                                        margin = 1.337, 
                                        currency_code = '', )
                                    ], 
                                discounts = [
                                    xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_options_inner_discounts_inner.PriceAndAvailabilityResponse_inner_subscriptionPrice_inner_options_inner_discounts_inner(
                                        volume_discounts = [
                                            xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_options_inner_discounts_inner_volume_discounts_inner.PriceAndAvailabilityResponse_inner_subscriptionPrice_inner_options_inner_discounts_inner_volumeDiscounts_inner(
                                                currency_code = '', 
                                                quantity = '', 
                                                msrp = 1.337, 
                                                unit_price = 1.337, 
                                                margin = 1.337, )
                                            ], 
                                        special_pricing = [
                                            xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_options_inner_discounts_inner_special_pricing_inner.PriceAndAvailabilityResponse_inner_subscriptionPrice_inner_options_inner_discounts_inner_specialPricing_inner(
                                                currency_code = '', 
                                                discount = 1.337, 
                                                discount_type = '', 
                                                discount_qty_limit = 56, 
                                                discount_expiry_date = '', 
                                                vendor_program_name = '', )
                                            ], )
                                    ], 
                                fees = [
                                    xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_options_inner_fees_inner.PriceAndAvailabilityResponse_inner_subscriptionPrice_inner_options_inner_fees_inner(
                                        price = 1.337, 
                                        type = '', 
                                        msrp = 1.337, 
                                        code = '', )
                                    ], )
                            ], )
                    ]
            )
        else:
            return PriceAndAvailabilityResponseInner(
        )
        """

    def testPriceAndAvailabilityResponseInner(self):
        """Test PriceAndAvailabilityResponseInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
