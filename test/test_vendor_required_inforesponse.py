# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from xi.sdk.resellers.models.vendor_required_inforesponse import VendorRequiredInforesponse

class TestVendorRequiredInforesponse(unittest.TestCase):
    """VendorRequiredInforesponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VendorRequiredInforesponse:
        """Test VendorRequiredInforesponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VendorRequiredInforesponse`
        """
        model = VendorRequiredInforesponse()
        if include_optional:
            return VendorRequiredInforesponse(
                quote_number = 'quoteNumber=QUO-14551943-D2Y9L9',
                ingram_part_number = '',
                vendor_part_number = '',
                plan_id = '',
                plan_name = '',
                response_messages = [
                    xi.sdk.resellers.models.vendor_required_inforesponse_response_messages_inner.VendorRequiredInforesponse_responseMessages_inner(
                        id = '', 
                        trace_id = '', 
                        type = '', 
                        message = '', )
                    ],
                vmf_additional_attributes = [
                    xi.sdk.resellers.models.vendor_required_inforesponse_vmf_additional_attributes_inner.VendorRequiredInforesponse_vmfAdditionalAttributes_inner(
                        vendor_name = '', 
                        product_id = '', 
                        additional_attributes = [
                            xi.sdk.resellers.models.vendor_required_inforesponse_vmf_additional_attributes_inner_additional_attributes_inner.VendorRequiredInforesponse_vmfAdditionalAttributes_inner_additionalAttributes_inner(
                                attribute_name = '', 
                                attribute_value = '', 
                                attribute_description = '', 
                                attribute_hint = '', 
                                choices = [
                                    xi.sdk.resellers.models.vendor_required_inforesponse_vmf_additional_attributes_inner_additional_attributes_inner_choices_inner.VendorRequiredInforesponse_vmfAdditionalAttributes_inner_additionalAttributes_inner_choices_inner(
                                        string = '', )
                                    ], )
                            ], )
                    ],
                vri_additional_attributes = [
                    xi.sdk.resellers.models.vendor_required_inforesponse_vmf_additional_attributes_inner_additional_attributes_inner.VendorRequiredInforesponse_vmfAdditionalAttributes_inner_additionalAttributes_inner(
                        attribute_name = '', 
                        attribute_value = '', 
                        attribute_description = '', 
                        attribute_hint = '', 
                        choices = [
                            xi.sdk.resellers.models.vendor_required_inforesponse_vmf_additional_attributes_inner_additional_attributes_inner_choices_inner.VendorRequiredInforesponse_vmfAdditionalAttributes_inner_additionalAttributes_inner_choices_inner(
                                string = '', )
                            ], )
                    ]
            )
        else:
            return VendorRequiredInforesponse(
        )
        """

    def testVendorRequiredInforesponse(self):
        """Test VendorRequiredInforesponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
