# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from xi.sdk.resellers.models.quote_details_response_additional_attributes_inner import QuoteDetailsResponseAdditionalAttributesInner
from xi.sdk.resellers.models.quote_details_response_end_user_info import QuoteDetailsResponseEndUserInfo
from xi.sdk.resellers.models.quote_details_response_products_inner import QuoteDetailsResponseProductsInner
from xi.sdk.resellers.models.quote_details_response_products_inner_price_extra_fees_details_inner import QuoteDetailsResponseProductsInnerPriceExtraFeesDetailsInner
from xi.sdk.resellers.models.quote_details_response_reseller_info import QuoteDetailsResponseResellerInfo
from xi.sdk.resellers.models.quote_details_response_shipping_info import QuoteDetailsResponseShippingInfo
from typing import Optional, Set
from typing_extensions import Self

class QuoteDetailsResponse(BaseModel):
    """
    QuoteDetailsResponse
    """ # noqa: E501
    quote_name: Optional[StrictStr] = Field(default=None, description="Quote Name given to quote by sales team or system generated.  Generally used as a reference to identify the quote.", alias="quoteName")
    quote_number: Optional[StrictStr] = Field(default=None, description="Unique identifier generated by Ingram Micro's CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.", alias="quoteNumber")
    quote_guid: Optional[StrictStr] = Field(default=None, alias="quoteGuid")
    revision: Optional[StrictStr] = Field(default=None, description="When a quote has been revised and updated, the quote number remains the same throughout the lifecycle of the quote, however, a Revision number is updated for each revision of the quote.  The revision numbers is associated with the Unique Quote Number.")
    ingram_quote_date: Optional[StrictStr] = Field(default=None, description="Date the Quote was initially Created.", alias="ingramQuoteDate")
    last_modified_date: Optional[StrictStr] = Field(default=None, description="Date the Quote was last updated or modified.", alias="lastModifiedDate")
    ingram_quote_expiry_date: Optional[StrictStr] = Field(default=None, description="Quote expiration date.", alias="ingramQuoteExpiryDate")
    currency_code: Optional[StrictStr] = Field(default=None, description="Three letter currency code.", alias="currencyCode")
    special_bid_id: Optional[StrictStr] = Field(default=None, description="Price discount identifyer to specify  a pricing discount that has been applied to the quote. If present - the priceDeviationStartDate and priceDeviationExpiryDate must be presented. Cisco refers to this as a Dart", alias="specialBidId")
    special_bid_effective_date: Optional[StrictStr] = Field(default=None, description="If price discount has been applied to the quote - the starting date the discount begins.", alias="specialBidEffectiveDate")
    special_bid_expiration_date: Optional[StrictStr] = Field(default=None, description="If a price discount has been applied to the quote - The date the discount expires and will no longer be applicable.", alias="specialBidExpirationDate")
    vendor_quote_number: Optional[StrictStr] = Field(default=None, alias="vendorQuoteNumber")
    is_partial_order_allowed: Optional[StrictBool] = Field(default=None, alias="isPartialOrderAllowed")
    status: Optional[StrictStr] = Field(default=None, description="This refers to the primary status of the quote.  API responses will return")
    status_reason: Optional[StrictStr] = Field(default=None, alias="statusReason")
    closing_reason: Optional[StrictStr] = Field(default=None, description="Closing Reason for quote.", alias="closingReason")
    date_closed: Optional[StrictStr] = Field(default=None, alias="dateClosed")
    customer_need: Optional[StrictStr] = Field(default=None, description="Details related to the customer's request for the quote entered by the sales representative or system generated.", alias="customerNeed")
    proposed_solution: Optional[StrictStr] = Field(default=None, description="Ingram Micro proposed solution and summary of quote.", alias="proposedSolution")
    intro_preamble: Optional[StrictStr] = Field(default=None, description="Introductory paragraph included in each quote.  Legally required - must be included when presenting the quote details.", alias="introPreamble")
    purchase_instructions: Optional[StrictStr] = Field(default=None, description="Purchase instructions.  Legally required - must be included when presenting the quote details.", alias="purchaseInstructions")
    legal_terms: Optional[StrictStr] = Field(default=None, description="Legal terms -  Legally required - must be included when presenting the quote details.", alias="legalTerms")
    quote_type: Optional[StrictStr] = Field(default=None, alias="quoteType")
    lease_info: Optional[StrictStr] = Field(default=None, description="Lease information.", alias="leaseInfo")
    leasing_instructions: Optional[StrictStr] = Field(default=None, description="Leasing information", alias="leasingInstructions")
    im_warehouse: Optional[StrictStr] = Field(default=None, description="Warehouse name and Address", alias="imWarehouse")
    im_warehouse_gst_number: Optional[StrictStr] = Field(default=None, description="Warehouse GST Number", alias="imWarehouseGstNumber")
    payment_terms_name: Optional[StrictStr] = Field(default=None, alias="paymentTermsName")
    reseller_info: Optional[QuoteDetailsResponseResellerInfo] = Field(default=None, alias="resellerInfo")
    end_user_info: Optional[QuoteDetailsResponseEndUserInfo] = Field(default=None, alias="endUserInfo")
    shipping_info: Optional[QuoteDetailsResponseShippingInfo] = Field(default=None, alias="shippingInfo")
    products: Optional[List[QuoteDetailsResponseProductsInner]] = None
    products_count: Optional[StrictInt] = Field(default=None, description="Total number of products included in the quote", alias="productsCount")
    extended_msrp_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total extended MSRP for all products included in the quote", alias="extendedMsrpTotal")
    quantity_total: Optional[StrictInt] = Field(default=None, description="Total quantity of all items in the quote.", alias="quantityTotal")
    extra_fees_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="extraFeesTotal")
    extra_fees_total_details: Optional[List[QuoteDetailsResponseProductsInnerPriceExtraFeesDetailsInner]] = Field(default=None, alias="extraFeesTotalDetails")
    tax_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxTotal")
    extended_quote_price_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of quoted price for all products in the quote including both solution products and suggested products.", alias="extendedQuotePriceTotal")
    freight_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freightAmount")
    total_quote_amount: Optional[StrictStr] = Field(default=None, alias="totalQuoteAmount")
    additional_attributes: Optional[List[QuoteDetailsResponseAdditionalAttributesInner]] = Field(default=None, alias="additionalAttributes")
    __properties: ClassVar[List[str]] = ["quoteName", "quoteNumber", "quoteGuid", "revision", "ingramQuoteDate", "lastModifiedDate", "ingramQuoteExpiryDate", "currencyCode", "specialBidId", "specialBidEffectiveDate", "specialBidExpirationDate", "vendorQuoteNumber", "isPartialOrderAllowed", "status", "statusReason", "closingReason", "dateClosed", "customerNeed", "proposedSolution", "introPreamble", "purchaseInstructions", "legalTerms", "quoteType", "leaseInfo", "leasingInstructions", "imWarehouse", "imWarehouseGstNumber", "paymentTermsName", "resellerInfo", "endUserInfo", "shippingInfo", "products", "productsCount", "extendedMsrpTotal", "quantityTotal", "extraFeesTotal", "extraFeesTotalDetails", "taxTotal", "extendedQuotePriceTotal", "freightAmount", "totalQuoteAmount", "additionalAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuoteDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reseller_info
        if self.reseller_info:
            _dict['resellerInfo'] = self.reseller_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_user_info
        if self.end_user_info:
            _dict['endUserInfo'] = self.end_user_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_info
        if self.shipping_info:
            _dict['shippingInfo'] = self.shipping_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item_products in self.products:
                if _item_products:
                    _items.append(_item_products.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extra_fees_total_details (list)
        _items = []
        if self.extra_fees_total_details:
            for _item_extra_fees_total_details in self.extra_fees_total_details:
                if _item_extra_fees_total_details:
                    _items.append(_item_extra_fees_total_details.to_dict())
            _dict['extraFeesTotalDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_attributes (list)
        _items = []
        if self.additional_attributes:
            for _item_additional_attributes in self.additional_attributes:
                if _item_additional_attributes:
                    _items.append(_item_additional_attributes.to_dict())
            _dict['additionalAttributes'] = _items
        # set to None if is_partial_order_allowed (nullable) is None
        # and model_fields_set contains the field
        if self.is_partial_order_allowed is None and "is_partial_order_allowed" in self.model_fields_set:
            _dict['isPartialOrderAllowed'] = None

        # set to None if extended_msrp_total (nullable) is None
        # and model_fields_set contains the field
        if self.extended_msrp_total is None and "extended_msrp_total" in self.model_fields_set:
            _dict['extendedMsrpTotal'] = None

        # set to None if tax_total (nullable) is None
        # and model_fields_set contains the field
        if self.tax_total is None and "tax_total" in self.model_fields_set:
            _dict['taxTotal'] = None

        # set to None if freight_amount (nullable) is None
        # and model_fields_set contains the field
        if self.freight_amount is None and "freight_amount" in self.model_fields_set:
            _dict['freightAmount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuoteDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteName": obj.get("quoteName"),
            "quoteNumber": obj.get("quoteNumber"),
            "quoteGuid": obj.get("quoteGuid"),
            "revision": obj.get("revision"),
            "ingramQuoteDate": obj.get("ingramQuoteDate"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "ingramQuoteExpiryDate": obj.get("ingramQuoteExpiryDate"),
            "currencyCode": obj.get("currencyCode"),
            "specialBidId": obj.get("specialBidId"),
            "specialBidEffectiveDate": obj.get("specialBidEffectiveDate"),
            "specialBidExpirationDate": obj.get("specialBidExpirationDate"),
            "vendorQuoteNumber": obj.get("vendorQuoteNumber"),
            "isPartialOrderAllowed": obj.get("isPartialOrderAllowed"),
            "status": obj.get("status"),
            "statusReason": obj.get("statusReason"),
            "closingReason": obj.get("closingReason"),
            "dateClosed": obj.get("dateClosed"),
            "customerNeed": obj.get("customerNeed"),
            "proposedSolution": obj.get("proposedSolution"),
            "introPreamble": obj.get("introPreamble"),
            "purchaseInstructions": obj.get("purchaseInstructions"),
            "legalTerms": obj.get("legalTerms"),
            "quoteType": obj.get("quoteType"),
            "leaseInfo": obj.get("leaseInfo"),
            "leasingInstructions": obj.get("leasingInstructions"),
            "imWarehouse": obj.get("imWarehouse"),
            "imWarehouseGstNumber": obj.get("imWarehouseGstNumber"),
            "paymentTermsName": obj.get("paymentTermsName"),
            "resellerInfo": QuoteDetailsResponseResellerInfo.from_dict(obj["resellerInfo"]) if obj.get("resellerInfo") is not None else None,
            "endUserInfo": QuoteDetailsResponseEndUserInfo.from_dict(obj["endUserInfo"]) if obj.get("endUserInfo") is not None else None,
            "shippingInfo": QuoteDetailsResponseShippingInfo.from_dict(obj["shippingInfo"]) if obj.get("shippingInfo") is not None else None,
            "products": [QuoteDetailsResponseProductsInner.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "productsCount": obj.get("productsCount"),
            "extendedMsrpTotal": obj.get("extendedMsrpTotal"),
            "quantityTotal": obj.get("quantityTotal"),
            "extraFeesTotal": obj.get("extraFeesTotal"),
            "extraFeesTotalDetails": [QuoteDetailsResponseProductsInnerPriceExtraFeesDetailsInner.from_dict(_item) for _item in obj["extraFeesTotalDetails"]] if obj.get("extraFeesTotalDetails") is not None else None,
            "taxTotal": obj.get("taxTotal"),
            "extendedQuotePriceTotal": obj.get("extendedQuotePriceTotal"),
            "freightAmount": obj.get("freightAmount"),
            "totalQuoteAmount": obj.get("totalQuoteAmount"),
            "additionalAttributes": [QuoteDetailsResponseAdditionalAttributesInner.from_dict(_item) for _item in obj["additionalAttributes"]] if obj.get("additionalAttributes") is not None else None
        })
        return _obj


