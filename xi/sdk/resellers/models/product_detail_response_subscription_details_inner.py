# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from xi.sdk.resellers.models.product_detail_response_subscription_details_inner_billing_period import ProductDetailResponseSubscriptionDetailsInnerBillingPeriod
from xi.sdk.resellers.models.product_detail_response_subscription_details_inner_groups_inner import ProductDetailResponseSubscriptionDetailsInnerGroupsInner
from xi.sdk.resellers.models.product_detail_response_subscription_details_inner_options_inner import ProductDetailResponseSubscriptionDetailsInnerOptionsInner
from xi.sdk.resellers.models.product_detail_response_subscription_details_inner_subscription_period_inner import ProductDetailResponseSubscriptionDetailsInnerSubscriptionPeriodInner
from xi.sdk.resellers.models.product_search_response_subscription_catalog_inner_plans_inner_links_inner import ProductSearchResponseSubscriptionCatalogInnerPlansInnerLinksInner
from typing import Optional, Set
from typing_extensions import Self

class ProductDetailResponseSubscriptionDetailsInner(BaseModel):
    """
    ProductDetailResponseSubscriptionDetailsInner
    """ # noqa: E501
    plan_id: Optional[StrictStr] = Field(default=None, description="ID of the subscription plan.", alias="planId")
    plan_name: Optional[StrictStr] = Field(default=None, description="Name of the subscription plan.", alias="planName")
    plan_description: Optional[StrictStr] = Field(default=None, description="Description of the subscription plan.", alias="planDescription")
    groups: Optional[List[ProductDetailResponseSubscriptionDetailsInnerGroupsInner]] = Field(default=None, description="Details of the groups subscription product part of.")
    subscription_period: Optional[List[ProductDetailResponseSubscriptionDetailsInnerSubscriptionPeriodInner]] = Field(default=None, description="Details of the subscription period.", alias="subscriptionPeriod")
    billing_period: Optional[ProductDetailResponseSubscriptionDetailsInnerBillingPeriod] = Field(default=None, alias="billingPeriod")
    options: Optional[List[ProductDetailResponseSubscriptionDetailsInnerOptionsInner]] = Field(default=None, description="Details of the resources available.")
    links: Optional[List[ProductSearchResponseSubscriptionCatalogInnerPlansInnerLinksInner]] = None
    next_page: Optional[StrictStr] = Field(default=None, description="link/URL for accessing next page.", alias="nextPage")
    previous_page: Optional[StrictStr] = Field(default=None, description="link/URL for accessing previous page.", alias="previousPage")
    __properties: ClassVar[List[str]] = ["planId", "planName", "planDescription", "groups", "subscriptionPeriod", "billingPeriod", "options", "links", "nextPage", "previousPage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductDetailResponseSubscriptionDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item_groups in self.groups:
                if _item_groups:
                    _items.append(_item_groups.to_dict())
            _dict['groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscription_period (list)
        _items = []
        if self.subscription_period:
            for _item_subscription_period in self.subscription_period:
                if _item_subscription_period:
                    _items.append(_item_subscription_period.to_dict())
            _dict['subscriptionPeriod'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_period
        if self.billing_period:
            _dict['billingPeriod'] = self.billing_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item_options in self.options:
                if _item_options:
                    _items.append(_item_options.to_dict())
            _dict['options'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductDetailResponseSubscriptionDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "planId": obj.get("planId"),
            "planName": obj.get("planName"),
            "planDescription": obj.get("planDescription"),
            "groups": [ProductDetailResponseSubscriptionDetailsInnerGroupsInner.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "subscriptionPeriod": [ProductDetailResponseSubscriptionDetailsInnerSubscriptionPeriodInner.from_dict(_item) for _item in obj["subscriptionPeriod"]] if obj.get("subscriptionPeriod") is not None else None,
            "billingPeriod": ProductDetailResponseSubscriptionDetailsInnerBillingPeriod.from_dict(obj["billingPeriod"]) if obj.get("billingPeriod") is not None else None,
            "options": [ProductDetailResponseSubscriptionDetailsInnerOptionsInner.from_dict(_item) for _item in obj["options"]] if obj.get("options") is not None else None,
            "links": [ProductSearchResponseSubscriptionCatalogInnerPlansInnerLinksInner.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "nextPage": obj.get("nextPage"),
            "previousPage": obj.get("previousPage")
        })
        return _obj


