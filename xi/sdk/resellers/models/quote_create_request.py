# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from xi.sdk.resellers.models.quote_create_request_end_user_info import QuoteCreateRequestEndUserInfo
from xi.sdk.resellers.models.quote_create_request_products_inner import QuoteCreateRequestProductsInner
from typing import Optional, Set
from typing_extensions import Self

class QuoteCreateRequest(BaseModel):
    """
    QuoteCreateRequest
    """ # noqa: E501
    quote_name: Optional[StrictStr] = Field(default=None, description="Quote Name given to quote by sales team or system generated. Generally used as a reference to identify the quote.", alias="quoteName")
    firstname: Optional[StrictStr] = Field(default=None, description="Logged in Users firstname")
    lastname: Optional[StrictStr] = Field(default=None, description="Logged in Users Lastname")
    customer_contact: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="Logged in Users email address contact.", alias="customerContact")
    quote_expiry_date: Optional[StrictStr] = Field(default=None, description="The date on which a quote will expire.", alias="quoteExpiryDate")
    customer_need: Optional[StrictStr] = Field(default=None, description="Any special need from the customer.", alias="customerNeed")
    end_user_info: Optional[QuoteCreateRequestEndUserInfo] = Field(default=None, alias="endUserInfo")
    deal_id: Optional[StrictStr] = Field(default=None, description="Price discount identifyer to specify a pricing discount that has been applied to the quote.", alias="dealId")
    pricing_type: Optional[StrictStr] = Field(default=None, description="Pricing type of the quote.", alias="pricingType")
    send_quote_copy: Optional[StrictStr] = Field(default=None, description="List of email addressed to whom the quote will be emailed after it's created. (Max 10 email ids)", alias="sendQuoteCopy")
    products: Optional[List[QuoteCreateRequestProductsInner]] = None
    __properties: ClassVar[List[str]] = ["quoteName", "firstname", "lastname", "customerContact", "quoteExpiryDate", "customerNeed", "endUserInfo", "dealId", "pricingType", "sendQuoteCopy", "products"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuoteCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_user_info
        if self.end_user_info:
            _dict['endUserInfo'] = self.end_user_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item_products in self.products:
                if _item_products:
                    _items.append(_item_products.to_dict())
            _dict['products'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuoteCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteName": obj.get("quoteName"),
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "customerContact": obj.get("customerContact"),
            "quoteExpiryDate": obj.get("quoteExpiryDate"),
            "customerNeed": obj.get("customerNeed"),
            "endUserInfo": QuoteCreateRequestEndUserInfo.from_dict(obj["endUserInfo"]) if obj.get("endUserInfo") is not None else None,
            "dealId": obj.get("dealId"),
            "pricingType": obj.get("pricingType"),
            "sendQuoteCopy": obj.get("sendQuoteCopy"),
            "products": [QuoteCreateRequestProductsInner.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None
        })
        return _obj


