# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DealsDetailsResponseProductsInner(BaseModel):
    """
    DealsDetailsResponseProductsInner
    """ # noqa: E501
    ingram_part_number: Optional[StrictStr] = Field(default=None, description="Unique Ingram part number.", alias="ingramPartNumber")
    vendor_part_number: Optional[StrictStr] = Field(default=None, description="Vendor Part number for the product.", alias="vendorPartNumber")
    upc: Optional[StrictStr] = Field(default=None, description="The UPC code for the product. Consists of 12 numeric digits that are uniquely assigned to each trade item.")
    product_description: Optional[StrictStr] = Field(default=None, description="Description of the product.", alias="productDescription")
    msrp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Manufacturer Suggested Retail Price.")
    extended_msrp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Extended MSRP - Manufacturer Suggested Retail Price X Quantity.", alias="extendedMSRP")
    standard_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Standard price of the line item.", alias="standardPrice")
    approved_quantity: Optional[StrictInt] = Field(default=None, description="Total quantity approved for the deal.", alias="approvedQuantity")
    remaining_quantity: Optional[StrictInt] = Field(default=None, description="The quantity remaining as part of the deal for the customer to order.", alias="remainingQuantity")
    comments: Optional[StrictStr] = Field(default=None, description="Comments of the deal.")
    special_conditions: Optional[StrictStr] = Field(default=None, description="Special conditions of the deal.", alias="specialConditions")
    start_date: Optional[StrictStr] = Field(default=None, description="Start Date.", alias="startDate")
    expiration_date: Optional[StrictStr] = Field(default=None, description="Expiration date.", alias="expirationDate")
    days_remaining: Optional[StrictInt] = Field(default=None, description="Number of days remaining before the deal expires.", alias="daysRemaining")
    __properties: ClassVar[List[str]] = ["ingramPartNumber", "vendorPartNumber", "upc", "productDescription", "msrp", "extendedMSRP", "standardPrice", "approvedQuantity", "remainingQuantity", "comments", "specialConditions", "startDate", "expirationDate", "daysRemaining"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DealsDetailsResponseProductsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DealsDetailsResponseProductsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ingramPartNumber": obj.get("ingramPartNumber"),
            "vendorPartNumber": obj.get("vendorPartNumber"),
            "upc": obj.get("upc"),
            "productDescription": obj.get("productDescription"),
            "msrp": obj.get("msrp"),
            "extendedMSRP": obj.get("extendedMSRP"),
            "standardPrice": obj.get("standardPrice"),
            "approvedQuantity": obj.get("approvedQuantity"),
            "remainingQuantity": obj.get("remainingQuantity"),
            "comments": obj.get("comments"),
            "specialConditions": obj.get("specialConditions"),
            "startDate": obj.get("startDate"),
            "expirationDate": obj.get("expirationDate"),
            "daysRemaining": obj.get("daysRemaining")
        })
        return _obj


