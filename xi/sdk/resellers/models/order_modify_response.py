# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from xi.sdk.resellers.models.order_modify_response_lines_inner import OrderModifyResponseLinesInner
from xi.sdk.resellers.models.order_modify_response_lines_inner_additional_attributes_inner import OrderModifyResponseLinesInnerAdditionalAttributesInner
from xi.sdk.resellers.models.order_modify_response_rejected_line_items_inner import OrderModifyResponseRejectedLineItemsInner
from xi.sdk.resellers.models.order_modify_response_ship_to_info import OrderModifyResponseShipToInfo
from typing import Optional, Set
from typing_extensions import Self

class OrderModifyResponse(BaseModel):
    """
    OrderModifyResponse
    """ # noqa: E501
    ingram_order_number: Optional[StrictStr] = Field(default=None, description="The IngramMicro order number.", alias="ingramOrderNumber")
    change_description: Optional[StrictStr] = Field(default=None, description="The description of the change.", alias="changeDescription")
    order_modified_date: Optional[StrictStr] = Field(default=None, description="The date the order was modified.", alias="orderModifiedDate")
    customer_order_number: Optional[StrictStr] = Field(default=None, description="The reseller's order number for reference in their system.", alias="customerOrderNumber")
    end_customer_order_number: Optional[StrictStr] = Field(default=None, description="The end user/customer's order number for reference in their system.", alias="endCustomerOrderNumber")
    order_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total for the order.", alias="orderTotal")
    notes: Optional[StrictStr] = Field(default=None, description="Order-level notes.")
    order_sub_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The sub total for the order.", alias="orderSubTotal")
    freight_charges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The freight charges for the order.", alias="freightCharges")
    total_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total tax for the order.", alias="totalTax")
    order_status: Optional[StrictStr] = Field(default=None, description="The status of the order. One of the following. Backordered, In Progress, Shipped, Delivered, Canceled, On Hold", alias="orderStatus")
    bill_to_address_id: Optional[StrictStr] = Field(default=None, description="Suffix used to identify billing address. Created during onboarding. Resellers are provided with one or more address IDs depending on how many bill to addresses they need for various flooring companies they are using for credit.", alias="billToAddressId")
    ship_to_info: Optional[OrderModifyResponseShipToInfo] = Field(default=None, alias="shipToInfo")
    lines: Optional[List[OrderModifyResponseLinesInner]] = Field(default=None, description="The line-level details for the order.")
    rejected_line_items: Optional[List[OrderModifyResponseRejectedLineItemsInner]] = Field(default=None, description="Details for failed lines in the order.", alias="rejectedLineItems")
    additional_attributes: Optional[List[OrderModifyResponseLinesInnerAdditionalAttributesInner]] = Field(default=None, description="Header-level additional attributes.", alias="additionalAttributes")
    __properties: ClassVar[List[str]] = ["ingramOrderNumber", "changeDescription", "orderModifiedDate", "customerOrderNumber", "endCustomerOrderNumber", "orderTotal", "notes", "orderSubTotal", "freightCharges", "totalTax", "orderStatus", "billToAddressId", "shipToInfo", "lines", "rejectedLineItems", "additionalAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderModifyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ship_to_info
        if self.ship_to_info:
            _dict['shipToInfo'] = self.ship_to_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item_lines in self.lines:
                if _item_lines:
                    _items.append(_item_lines.to_dict())
            _dict['lines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rejected_line_items (list)
        _items = []
        if self.rejected_line_items:
            for _item_rejected_line_items in self.rejected_line_items:
                if _item_rejected_line_items:
                    _items.append(_item_rejected_line_items.to_dict())
            _dict['rejectedLineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_attributes (list)
        _items = []
        if self.additional_attributes:
            for _item_additional_attributes in self.additional_attributes:
                if _item_additional_attributes:
                    _items.append(_item_additional_attributes.to_dict())
            _dict['additionalAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderModifyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ingramOrderNumber": obj.get("ingramOrderNumber"),
            "changeDescription": obj.get("changeDescription"),
            "orderModifiedDate": obj.get("orderModifiedDate"),
            "customerOrderNumber": obj.get("customerOrderNumber"),
            "endCustomerOrderNumber": obj.get("endCustomerOrderNumber"),
            "orderTotal": obj.get("orderTotal"),
            "notes": obj.get("notes"),
            "orderSubTotal": obj.get("orderSubTotal"),
            "freightCharges": obj.get("freightCharges"),
            "totalTax": obj.get("totalTax"),
            "orderStatus": obj.get("orderStatus"),
            "billToAddressId": obj.get("billToAddressId"),
            "shipToInfo": OrderModifyResponseShipToInfo.from_dict(obj["shipToInfo"]) if obj.get("shipToInfo") is not None else None,
            "lines": [OrderModifyResponseLinesInner.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None,
            "rejectedLineItems": [OrderModifyResponseRejectedLineItemsInner.from_dict(_item) for _item in obj["rejectedLineItems"]] if obj.get("rejectedLineItems") is not None else None,
            "additionalAttributes": [OrderModifyResponseLinesInnerAdditionalAttributesInner.from_dict(_item) for _item in obj["additionalAttributes"]] if obj.get("additionalAttributes") is not None else None
        })
        return _obj


