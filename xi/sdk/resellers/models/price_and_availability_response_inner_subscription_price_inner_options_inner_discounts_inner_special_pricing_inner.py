# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerDiscountsInnerSpecialPricingInner(BaseModel):
    """
    PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerDiscountsInnerSpecialPricingInner
    """ # noqa: E501
    currency_code: Optional[StrictStr] = Field(default=None, description="The 3-digit ISO currency code.", alias="currencyCode")
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The discount for the line item.")
    discount_type: Optional[StrictStr] = Field(default=None, description="The type of the discount", alias="discountType")
    discount_qty_limit: Optional[StrictInt] = Field(default=None, description="The quantity available at the discounted price", alias="discountQtyLimit")
    discount_expiry_date: Optional[StrictStr] = Field(default=None, description="The date when discount expires.", alias="discountExpiryDate")
    vendor_program_name: Optional[StrictStr] = Field(default=None, description="The vendors discount program name.", alias="vendorProgramName")
    __properties: ClassVar[List[str]] = ["currencyCode", "discount", "discountType", "discountQtyLimit", "discountExpiryDate", "vendorProgramName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerDiscountsInnerSpecialPricingInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.currency_code is None and "currency_code" in self.model_fields_set:
            _dict['currencyCode'] = None

        # set to None if discount (nullable) is None
        # and model_fields_set contains the field
        if self.discount is None and "discount" in self.model_fields_set:
            _dict['discount'] = None

        # set to None if discount_type (nullable) is None
        # and model_fields_set contains the field
        if self.discount_type is None and "discount_type" in self.model_fields_set:
            _dict['discountType'] = None

        # set to None if discount_qty_limit (nullable) is None
        # and model_fields_set contains the field
        if self.discount_qty_limit is None and "discount_qty_limit" in self.model_fields_set:
            _dict['discountQtyLimit'] = None

        # set to None if discount_expiry_date (nullable) is None
        # and model_fields_set contains the field
        if self.discount_expiry_date is None and "discount_expiry_date" in self.model_fields_set:
            _dict['discountExpiryDate'] = None

        # set to None if vendor_program_name (nullable) is None
        # and model_fields_set contains the field
        if self.vendor_program_name is None and "vendor_program_name" in self.model_fields_set:
            _dict['vendorProgramName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerDiscountsInnerSpecialPricingInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currencyCode": obj.get("currencyCode"),
            "discount": obj.get("discount"),
            "discountType": obj.get("discountType"),
            "discountQtyLimit": obj.get("discountQtyLimit"),
            "discountExpiryDate": obj.get("discountExpiryDate"),
            "vendorProgramName": obj.get("vendorProgramName")
        })
        return _obj


