# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from xi.sdk.resellers.models.renewals_search_response_renewals_inner_links_inner import RenewalsSearchResponseRenewalsInnerLinksInner
from typing import Optional, Set
from typing_extensions import Self

class RenewalsSearchResponseRenewalsInner(BaseModel):
    """
    RenewalsSearchResponseRenewalsInner
    """ # noqa: E501
    renewal_id: Optional[StrictInt] = Field(default=None, description="Unique renewal ID.", alias="renewalId")
    customer_order_number: Optional[StrictStr] = Field(default=None, description="The reseller's order number for reference in their system.", alias="customerOrderNumber")
    reference_number: Optional[StrictStr] = Field(default=None, description="Renewal reference number. It could be notification id or quote number.", alias="referenceNumber")
    end_user: Optional[StrictStr] = Field(default=None, description="The company name for the end user/customer.", alias="endUser")
    vendor: Optional[StrictStr] = Field(default=None, description="The name of the vendor.")
    expiration_date: Optional[StrictStr] = Field(default=None, description="Renewal expiration date.", alias="expirationDate")
    renewal_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value of the renewal.", alias="renewalValue")
    status: Optional[StrictStr] = Field(default=None, description="The status of the renewal.")
    links: Optional[List[RenewalsSearchResponseRenewalsInnerLinksInner]] = None
    __properties: ClassVar[List[str]] = ["renewalId", "customerOrderNumber", "referenceNumber", "endUser", "vendor", "expirationDate", "renewalValue", "status", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RenewalsSearchResponseRenewalsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RenewalsSearchResponseRenewalsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "renewalId": obj.get("renewalId"),
            "customerOrderNumber": obj.get("customerOrderNumber"),
            "referenceNumber": obj.get("referenceNumber"),
            "endUser": obj.get("endUser"),
            "vendor": obj.get("vendor"),
            "expirationDate": obj.get("expirationDate"),
            "renewalValue": obj.get("renewalValue"),
            "status": obj.get("status"),
            "links": [RenewalsSearchResponseRenewalsInnerLinksInner.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


