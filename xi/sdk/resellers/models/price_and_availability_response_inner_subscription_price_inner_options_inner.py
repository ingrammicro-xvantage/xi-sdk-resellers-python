# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_options_inner_discounts_inner import PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerDiscountsInner
from xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_options_inner_fees_inner import PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerFeesInner
from xi.sdk.resellers.models.price_and_availability_response_inner_subscription_price_inner_options_inner_resource_pricing_inner import PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerResourcePricingInner
from typing import Optional, Set
from typing_extensions import Self

class PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInner(BaseModel):
    """
    PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInner
    """ # noqa: E501
    resource_id: Optional[StrictStr] = Field(default=None, alias="resourceId")
    resource_uid: Optional[StrictStr] = Field(default=None, description="The resource id of the subscription product.", alias="resourceUId")
    resource_name: Optional[StrictStr] = Field(default=None, description="The name of the resource of the subscription product.", alias="resourceName")
    vendor_part_number: Optional[StrictStr] = Field(default=None, description="Vendorâ€™s part number for the subscription product.", alias="vendorPartNumber")
    min_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum unit needs to purchased.", alias="minUnits")
    max_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum unit available for a purchase.", alias="maxUnits")
    recurringpricemodel: Optional[StrictStr] = Field(default=None, description="Recurring price model")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="Unit of mesaure for a subscription product.", alias="unitOfMeasure")
    resource_pricing: Optional[List[PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerResourcePricingInner]] = Field(default=None, alias="resourcePricing")
    discounts: Optional[List[PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerDiscountsInner]] = None
    fees: Optional[List[PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerFeesInner]] = None
    __properties: ClassVar[List[str]] = ["resourceId", "resourceUId", "resourceName", "vendorPartNumber", "minUnits", "maxUnits", "recurringpricemodel", "unitOfMeasure", "resourcePricing", "discounts", "fees"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resource_pricing (list)
        _items = []
        if self.resource_pricing:
            for _item_resource_pricing in self.resource_pricing:
                if _item_resource_pricing:
                    _items.append(_item_resource_pricing.to_dict())
            _dict['resourcePricing'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in discounts (list)
        _items = []
        if self.discounts:
            for _item_discounts in self.discounts:
                if _item_discounts:
                    _items.append(_item_discounts.to_dict())
            _dict['discounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item_fees in self.fees:
                if _item_fees:
                    _items.append(_item_fees.to_dict())
            _dict['fees'] = _items
        # set to None if resource_id (nullable) is None
        # and model_fields_set contains the field
        if self.resource_id is None and "resource_id" in self.model_fields_set:
            _dict['resourceId'] = None

        # set to None if resource_uid (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uid is None and "resource_uid" in self.model_fields_set:
            _dict['resourceUId'] = None

        # set to None if resource_name (nullable) is None
        # and model_fields_set contains the field
        if self.resource_name is None and "resource_name" in self.model_fields_set:
            _dict['resourceName'] = None

        # set to None if vendor_part_number (nullable) is None
        # and model_fields_set contains the field
        if self.vendor_part_number is None and "vendor_part_number" in self.model_fields_set:
            _dict['vendorPartNumber'] = None

        # set to None if min_units (nullable) is None
        # and model_fields_set contains the field
        if self.min_units is None and "min_units" in self.model_fields_set:
            _dict['minUnits'] = None

        # set to None if max_units (nullable) is None
        # and model_fields_set contains the field
        if self.max_units is None and "max_units" in self.model_fields_set:
            _dict['maxUnits'] = None

        # set to None if recurringpricemodel (nullable) is None
        # and model_fields_set contains the field
        if self.recurringpricemodel is None and "recurringpricemodel" in self.model_fields_set:
            _dict['recurringpricemodel'] = None

        # set to None if unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.unit_of_measure is None and "unit_of_measure" in self.model_fields_set:
            _dict['unitOfMeasure'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resourceId": obj.get("resourceId"),
            "resourceUId": obj.get("resourceUId"),
            "resourceName": obj.get("resourceName"),
            "vendorPartNumber": obj.get("vendorPartNumber"),
            "minUnits": obj.get("minUnits"),
            "maxUnits": obj.get("maxUnits"),
            "recurringpricemodel": obj.get("recurringpricemodel"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "resourcePricing": [PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerResourcePricingInner.from_dict(_item) for _item in obj["resourcePricing"]] if obj.get("resourcePricing") is not None else None,
            "discounts": [PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerDiscountsInner.from_dict(_item) for _item in obj["discounts"]] if obj.get("discounts") is not None else None,
            "fees": [PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInnerFeesInner.from_dict(_item) for _item in obj["fees"]] if obj.get("fees") is not None else None
        })
        return _obj


