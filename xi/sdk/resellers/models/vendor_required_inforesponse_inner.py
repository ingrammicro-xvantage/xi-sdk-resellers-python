# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from xi.sdk.resellers.models.vendor_required_inforesponse_inner_response_messages_inner import VendorRequiredInforesponseInnerResponseMessagesInner
from xi.sdk.resellers.models.vendor_required_inforesponse_inner_vmf_additional_attributes_inner import VendorRequiredInforesponseInnerVmfAdditionalAttributesInner
from xi.sdk.resellers.models.vendor_required_inforesponse_inner_vmf_additional_attributes_inner_additional_attributes_inner import VendorRequiredInforesponseInnerVmfAdditionalAttributesInnerAdditionalAttributesInner
from typing import Optional, Set
from typing_extensions import Self

class VendorRequiredInforesponseInner(BaseModel):
    """
    VendorRequiredInforesponseInner
    """ # noqa: E501
    quote_number: Optional[StrictStr] = Field(default=None, description="A unique identifier generated by Ingram Micro's CRM specific to each quote.", alias="quoteNumber")
    ingram_part_number: Optional[StrictStr] = Field(default=None, description="The unique IngramMicro part number.", alias="ingramPartNumber")
    vendor_part_number: Optional[StrictStr] = Field(default=None, description="The vendor's part number for the line item.", alias="vendorPartNumber")
    plan_id: Optional[StrictStr] = Field(default=None, description="ID of the subscription plan", alias="planId")
    plan_name: Optional[StrictStr] = Field(default=None, description="Name of the subscription plan", alias="planName")
    response_messages: Optional[List[VendorRequiredInforesponseInnerResponseMessagesInner]] = Field(default=None, alias="responseMessages")
    vmf_additional_attributes: Optional[List[VendorRequiredInforesponseInnerVmfAdditionalAttributesInner]] = Field(default=None, alias="vmfAdditionalAttributes")
    vri_additional_attributes: Optional[List[VendorRequiredInforesponseInnerVmfAdditionalAttributesInnerAdditionalAttributesInner]] = Field(default=None, alias="vriAdditionalAttributes")
    __properties: ClassVar[List[str]] = ["quoteNumber", "ingramPartNumber", "vendorPartNumber", "planId", "planName", "responseMessages", "vmfAdditionalAttributes", "vriAdditionalAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VendorRequiredInforesponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in response_messages (list)
        _items = []
        if self.response_messages:
            for _item_response_messages in self.response_messages:
                if _item_response_messages:
                    _items.append(_item_response_messages.to_dict())
            _dict['responseMessages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vmf_additional_attributes (list)
        _items = []
        if self.vmf_additional_attributes:
            for _item_vmf_additional_attributes in self.vmf_additional_attributes:
                if _item_vmf_additional_attributes:
                    _items.append(_item_vmf_additional_attributes.to_dict())
            _dict['vmfAdditionalAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vri_additional_attributes (list)
        _items = []
        if self.vri_additional_attributes:
            for _item_vri_additional_attributes in self.vri_additional_attributes:
                if _item_vri_additional_attributes:
                    _items.append(_item_vri_additional_attributes.to_dict())
            _dict['vriAdditionalAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VendorRequiredInforesponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteNumber": obj.get("quoteNumber"),
            "ingramPartNumber": obj.get("ingramPartNumber"),
            "vendorPartNumber": obj.get("vendorPartNumber"),
            "planId": obj.get("planId"),
            "planName": obj.get("planName"),
            "responseMessages": [VendorRequiredInforesponseInnerResponseMessagesInner.from_dict(_item) for _item in obj["responseMessages"]] if obj.get("responseMessages") is not None else None,
            "vmfAdditionalAttributes": [VendorRequiredInforesponseInnerVmfAdditionalAttributesInner.from_dict(_item) for _item in obj["vmfAdditionalAttributes"]] if obj.get("vmfAdditionalAttributes") is not None else None,
            "vriAdditionalAttributes": [VendorRequiredInforesponseInnerVmfAdditionalAttributesInnerAdditionalAttributesInner.from_dict(_item) for _item in obj["vriAdditionalAttributes"]] if obj.get("vriAdditionalAttributes") is not None else None
        })
        return _obj


