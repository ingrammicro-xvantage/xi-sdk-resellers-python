# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProductDetailResponseCiscoFields(BaseModel):
    """
    Cisco product related information.
    """ # noqa: E501
    product_sub_group: Optional[StrictStr] = Field(default=None, description="Cisco product sub-group", alias="productSubGroup")
    service_program_name: Optional[StrictStr] = Field(default=None, description="Cisco service program name", alias="serviceProgramName")
    item_catalog_category: Optional[StrictStr] = Field(default=None, description="Cisco item catalog category", alias="itemCatalogCategory")
    configuration_indicator: Optional[StrictStr] = Field(default=None, description="Cisco configuration indicator", alias="configurationIndicator")
    internal_business_entity: Optional[StrictStr] = Field(default=None, description="Cisco internal business entity", alias="internalBusinessEntity")
    item_type: Optional[StrictStr] = Field(default=None, description="Cisco item type", alias="itemType")
    global_list_price: Optional[StrictStr] = Field(default=None, description="Cisco global list price", alias="globalListPrice")
    __properties: ClassVar[List[str]] = ["productSubGroup", "serviceProgramName", "itemCatalogCategory", "configurationIndicator", "internalBusinessEntity", "itemType", "globalListPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductDetailResponseCiscoFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductDetailResponseCiscoFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "productSubGroup": obj.get("productSubGroup"),
            "serviceProgramName": obj.get("serviceProgramName"),
            "itemCatalogCategory": obj.get("itemCatalogCategory"),
            "configurationIndicator": obj.get("configurationIndicator"),
            "internalBusinessEntity": obj.get("internalBusinessEntity"),
            "itemType": obj.get("itemType"),
            "globalListPrice": obj.get("globalListPrice")
        })
        return _obj


