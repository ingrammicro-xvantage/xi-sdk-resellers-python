# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from xi.sdk.resellers.models.order_create_v7_request_additional_attributes_inner import OrderCreateV7RequestAdditionalAttributesInner
from xi.sdk.resellers.models.order_create_v7_request_end_user_info import OrderCreateV7RequestEndUserInfo
from xi.sdk.resellers.models.order_create_v7_request_lines_inner import OrderCreateV7RequestLinesInner
from xi.sdk.resellers.models.order_create_v7_request_reseller_info import OrderCreateV7RequestResellerInfo
from xi.sdk.resellers.models.order_create_v7_request_ship_to_info import OrderCreateV7RequestShipToInfo
from xi.sdk.resellers.models.order_create_v7_request_shipment_details import OrderCreateV7RequestShipmentDetails
from xi.sdk.resellers.models.order_create_v7_request_vmf_additional_attributes_inner import OrderCreateV7RequestVmfAdditionalAttributesInner
from typing import Optional, Set
from typing_extensions import Self

class OrderCreateV7Request(BaseModel):
    """
    OrderCreateV7Request
    """ # noqa: E501
    quote_number: Optional[Annotated[str, Field(strict=True, max_length=35)]] = Field(default=None, description="A unique identifier generated by Ingram Micro's CRM specific to each quote.", alias="quoteNumber")
    customer_order_number: Optional[Annotated[str, Field(strict=True, max_length=18)]] = Field(default=None, description="The reseller's order number for reference in their system.", alias="customerOrderNumber")
    end_customer_order_number: Optional[Annotated[str, Field(strict=True, max_length=18)]] = Field(default=None, description="The end customer's order number for reference in their system.", alias="endCustomerOrderNumber")
    notes: Optional[StrictStr] = Field(default=None, description="Order header level notes.")
    bill_to_address_id: Optional[StrictStr] = Field(default=None, description="Suffix used to identify billing address. Created during onboarding. Resellers are provided with one or more address IDs depending on how many bill to addresses they need for various flooring companies they are using for credit.", alias="billToAddressId")
    special_bid_number: Optional[StrictStr] = Field(default=None, description="The bid number is provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.", alias="specialBidNumber")
    accept_back_order: Optional[StrictBool] = Field(default=None, description="ENUM ['true','false'] - accept order if this item is backordered. This field along with shipComplete field decides the value of backorderflag. The value of this field is ignored when shipComplete field is present.", alias="acceptBackOrder")
    vend_auth_number: Optional[StrictStr] = Field(default=None, description="Authorization number provided by vendor to Ingram's reseller. Orders will be placed on hold without this value, vendor specific mandatory field - please reach out Ingram Sales team for list of vendor for whom this is mandatory.", alias="vendAuthNumber")
    reseller_info: Optional[OrderCreateV7RequestResellerInfo] = Field(default=None, alias="resellerInfo")
    end_user_info: Optional[OrderCreateV7RequestEndUserInfo] = Field(default=None, alias="endUserInfo")
    ship_to_info: Optional[OrderCreateV7RequestShipToInfo] = Field(default=None, alias="shipToInfo")
    shipment_details: Optional[OrderCreateV7RequestShipmentDetails] = Field(default=None, alias="shipmentDetails")
    additional_attributes: Optional[List[Optional[OrderCreateV7RequestAdditionalAttributesInner]]] = Field(default=None, description="Shipment-level additional attributes.", alias="additionalAttributes")
    vmf_additional_attributes: Optional[List[Optional[OrderCreateV7RequestVmfAdditionalAttributesInner]]] = Field(default=None, description="The object containing the list of fields required at a header level by the vendor.", alias="vmfAdditionalAttributes")
    lines: Optional[List[OrderCreateV7RequestLinesInner]] = None
    __properties: ClassVar[List[str]] = ["quoteNumber", "customerOrderNumber", "endCustomerOrderNumber", "notes", "billToAddressId", "specialBidNumber", "acceptBackOrder", "vendAuthNumber", "resellerInfo", "endUserInfo", "shipToInfo", "shipmentDetails", "additionalAttributes", "vmfAdditionalAttributes", "lines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderCreateV7Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reseller_info
        if self.reseller_info:
            _dict['resellerInfo'] = self.reseller_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_user_info
        if self.end_user_info:
            _dict['endUserInfo'] = self.end_user_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_info
        if self.ship_to_info:
            _dict['shipToInfo'] = self.ship_to_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipment_details
        if self.shipment_details:
            _dict['shipmentDetails'] = self.shipment_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_attributes (list)
        _items = []
        if self.additional_attributes:
            for _item_additional_attributes in self.additional_attributes:
                if _item_additional_attributes:
                    _items.append(_item_additional_attributes.to_dict())
            _dict['additionalAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vmf_additional_attributes (list)
        _items = []
        if self.vmf_additional_attributes:
            for _item_vmf_additional_attributes in self.vmf_additional_attributes:
                if _item_vmf_additional_attributes:
                    _items.append(_item_vmf_additional_attributes.to_dict())
            _dict['vmfAdditionalAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item_lines in self.lines:
                if _item_lines:
                    _items.append(_item_lines.to_dict())
            _dict['lines'] = _items
        # set to None if quote_number (nullable) is None
        # and model_fields_set contains the field
        if self.quote_number is None and "quote_number" in self.model_fields_set:
            _dict['quoteNumber'] = None

        # set to None if end_customer_order_number (nullable) is None
        # and model_fields_set contains the field
        if self.end_customer_order_number is None and "end_customer_order_number" in self.model_fields_set:
            _dict['endCustomerOrderNumber'] = None

        # set to None if special_bid_number (nullable) is None
        # and model_fields_set contains the field
        if self.special_bid_number is None and "special_bid_number" in self.model_fields_set:
            _dict['specialBidNumber'] = None

        # set to None if accept_back_order (nullable) is None
        # and model_fields_set contains the field
        if self.accept_back_order is None and "accept_back_order" in self.model_fields_set:
            _dict['acceptBackOrder'] = None

        # set to None if vend_auth_number (nullable) is None
        # and model_fields_set contains the field
        if self.vend_auth_number is None and "vend_auth_number" in self.model_fields_set:
            _dict['vendAuthNumber'] = None

        # set to None if reseller_info (nullable) is None
        # and model_fields_set contains the field
        if self.reseller_info is None and "reseller_info" in self.model_fields_set:
            _dict['resellerInfo'] = None

        # set to None if ship_to_info (nullable) is None
        # and model_fields_set contains the field
        if self.ship_to_info is None and "ship_to_info" in self.model_fields_set:
            _dict['shipToInfo'] = None

        # set to None if shipment_details (nullable) is None
        # and model_fields_set contains the field
        if self.shipment_details is None and "shipment_details" in self.model_fields_set:
            _dict['shipmentDetails'] = None

        # set to None if additional_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.additional_attributes is None and "additional_attributes" in self.model_fields_set:
            _dict['additionalAttributes'] = None

        # set to None if vmf_additional_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.vmf_additional_attributes is None and "vmf_additional_attributes" in self.model_fields_set:
            _dict['vmfAdditionalAttributes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderCreateV7Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteNumber": obj.get("quoteNumber"),
            "customerOrderNumber": obj.get("customerOrderNumber"),
            "endCustomerOrderNumber": obj.get("endCustomerOrderNumber"),
            "notes": obj.get("notes"),
            "billToAddressId": obj.get("billToAddressId"),
            "specialBidNumber": obj.get("specialBidNumber"),
            "acceptBackOrder": obj.get("acceptBackOrder"),
            "vendAuthNumber": obj.get("vendAuthNumber"),
            "resellerInfo": OrderCreateV7RequestResellerInfo.from_dict(obj["resellerInfo"]) if obj.get("resellerInfo") is not None else None,
            "endUserInfo": OrderCreateV7RequestEndUserInfo.from_dict(obj["endUserInfo"]) if obj.get("endUserInfo") is not None else None,
            "shipToInfo": OrderCreateV7RequestShipToInfo.from_dict(obj["shipToInfo"]) if obj.get("shipToInfo") is not None else None,
            "shipmentDetails": OrderCreateV7RequestShipmentDetails.from_dict(obj["shipmentDetails"]) if obj.get("shipmentDetails") is not None else None,
            "additionalAttributes": [OrderCreateV7RequestAdditionalAttributesInner.from_dict(_item) for _item in obj["additionalAttributes"]] if obj.get("additionalAttributes") is not None else None,
            "vmfAdditionalAttributes": [OrderCreateV7RequestVmfAdditionalAttributesInner.from_dict(_item) for _item in obj["vmfAdditionalAttributes"]] if obj.get("vmfAdditionalAttributes") is not None else None,
            "lines": [OrderCreateV7RequestLinesInner.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None
        })
        return _obj


