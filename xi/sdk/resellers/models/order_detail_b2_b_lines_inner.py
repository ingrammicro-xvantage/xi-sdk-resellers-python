# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from xi.sdk.resellers.models.order_detail_b2_b_lines_inner_additional_attributes_inner import OrderDetailB2BLinesInnerAdditionalAttributesInner
from xi.sdk.resellers.models.order_detail_b2_b_lines_inner_estimated_dates_inner import OrderDetailB2BLinesInnerEstimatedDatesInner
from xi.sdk.resellers.models.order_detail_b2_b_lines_inner_links_inner import OrderDetailB2BLinesInnerLinksInner
from xi.sdk.resellers.models.order_detail_b2_b_lines_inner_multiple_shipments_inner import OrderDetailB2BLinesInnerMultipleShipmentsInner
from xi.sdk.resellers.models.order_detail_b2_b_lines_inner_schedule_lines_inner import OrderDetailB2BLinesInnerScheduleLinesInner
from xi.sdk.resellers.models.order_detail_b2_b_lines_inner_service_contract_info import OrderDetailB2BLinesInnerServiceContractInfo
from xi.sdk.resellers.models.order_detail_b2_b_lines_inner_shipment_details_inner import OrderDetailB2BLinesInnerShipmentDetailsInner
from typing import Optional, Set
from typing_extensions import Self

class OrderDetailB2BLinesInner(BaseModel):
    """
    OrderDetailB2BLinesInner
    """ # noqa: E501
    sub_order_number: Optional[StrictStr] = Field(default=None, description="The sub order number. The two-digit prefix is the warehouse code of the warehouse nearest the reseller. The middle number is the order number. The two-digit suffix is the sub order number.", alias="subOrderNumber")
    ingram_order_line_number: Optional[StrictStr] = Field(default=None, description="Unique Ingram Micro line number. Starts with 001.", alias="ingramOrderLineNumber")
    vendor_sales_order_line_number: Optional[StrictStr] = Field(default=None, description="The vendor's sales order line number.", alias="vendorSalesOrderLineNumber")
    customer_line_number: Optional[StrictStr] = Field(default=None, description="The reseller's line item number for reference in their system.", alias="customerLineNumber")
    line_status: Optional[StrictStr] = Field(default=None, description="The status for the line item in the order. One of- Backordered, In Progress, Shipped, Delivered, Canceled, On Hold.", alias="lineStatus")
    ingram_part_number: Optional[StrictStr] = Field(default=None, description="Unique IngramMicro part number.", alias="ingramPartNumber")
    vendor_part_number: Optional[StrictStr] = Field(default=None, description="The vendor's part number for the line item.", alias="vendorPartNumber")
    vendor_name: Optional[StrictStr] = Field(default=None, description="The vendor's name for the part in their system.", alias="vendorName")
    part_description: Optional[StrictStr] = Field(default=None, description="The vendor's description of the part in their system.", alias="partDescription")
    unit_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unit weight of the line item.", alias="unitWeight")
    weight_uom: Optional[StrictStr] = Field(default=None, description="The unit of measure for the line item.", alias="weightUom")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unit price of the line item.", alias="unitPrice")
    upc_code: Optional[StrictStr] = Field(default=None, description="The UPC code of a product.", alias="upcCode")
    extended_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unit price X quantity for the line item.", alias="extendedPrice")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The tax amount for the line item.", alias="taxAmount")
    currency_code: Optional[StrictStr] = Field(default=None, description="The country-specific three character ISO 4217 currency code for the line item.", alias="currencyCode")
    quantity_ordered: Optional[StrictInt] = Field(default=None, description="The quantity ordered of the line item.", alias="quantityOrdered")
    quantity_confirmed: Optional[StrictInt] = Field(default=None, description="The quantity confirmed for the line item.", alias="quantityConfirmed")
    quantity_back_ordered: Optional[StrictInt] = Field(default=None, description="The quantity backordered for the line item.", alias="quantityBackOrdered")
    special_bid_number: Optional[StrictStr] = Field(default=None, description="The line-level bid number provided to the reseller by the vendor for special pricing and discounts. Used to track the bid number in the case of split orders or where different line items have different bid numbers. Line-level bid numbers take precedence over header-level bid numbers.", alias="specialBidNumber")
    requested_deliverydate: Optional[StrictStr] = Field(default=None, description="Reseller-requested delivery date. Delivery date is not guaranteed.", alias="requestedDeliverydate")
    promised_delivery_date: Optional[StrictStr] = Field(default=None, description="The delivery date promised by IngramMicro.", alias="promisedDeliveryDate")
    back_order_eta_date: Optional[StrictStr] = Field(default=None, description="Backorder ETA date", alias="backOrderETADate")
    line_notes: Optional[StrictStr] = Field(default=None, description="Line-level notes for the order.", alias="lineNotes")
    shipment_details: Optional[List[OrderDetailB2BLinesInnerShipmentDetailsInner]] = Field(default=None, description="Shipping details for the line item.", alias="shipmentDetails")
    service_contract_info: Optional[OrderDetailB2BLinesInnerServiceContractInfo] = Field(default=None, alias="serviceContractInfo")
    additional_attributes: Optional[List[OrderDetailB2BLinesInnerAdditionalAttributesInner]] = Field(default=None, alias="additionalAttributes")
    links: Optional[List[OrderDetailB2BLinesInnerLinksInner]] = None
    estimated_dates: Optional[List[OrderDetailB2BLinesInnerEstimatedDatesInner]] = Field(default=None, alias="estimatedDates")
    schedule_lines: Optional[List[OrderDetailB2BLinesInnerScheduleLinesInner]] = Field(default=None, alias="scheduleLines")
    multiple_shipments: Optional[List[OrderDetailB2BLinesInnerMultipleShipmentsInner]] = Field(default=None, alias="multipleShipments")
    default_carrier_name: Optional[StrictStr] = Field(default=None, alias="defaultCarrierName")
    __properties: ClassVar[List[str]] = ["subOrderNumber", "ingramOrderLineNumber", "vendorSalesOrderLineNumber", "customerLineNumber", "lineStatus", "ingramPartNumber", "vendorPartNumber", "vendorName", "partDescription", "unitWeight", "weightUom", "unitPrice", "upcCode", "extendedPrice", "taxAmount", "currencyCode", "quantityOrdered", "quantityConfirmed", "quantityBackOrdered", "specialBidNumber", "requestedDeliverydate", "promisedDeliveryDate", "backOrderETADate", "lineNotes", "shipmentDetails", "serviceContractInfo", "additionalAttributes", "links", "estimatedDates", "scheduleLines", "multipleShipments", "defaultCarrierName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderDetailB2BLinesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_details (list)
        _items = []
        if self.shipment_details:
            for _item_shipment_details in self.shipment_details:
                if _item_shipment_details:
                    _items.append(_item_shipment_details.to_dict())
            _dict['shipmentDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of service_contract_info
        if self.service_contract_info:
            _dict['serviceContractInfo'] = self.service_contract_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_attributes (list)
        _items = []
        if self.additional_attributes:
            for _item_additional_attributes in self.additional_attributes:
                if _item_additional_attributes:
                    _items.append(_item_additional_attributes.to_dict())
            _dict['additionalAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in estimated_dates (list)
        _items = []
        if self.estimated_dates:
            for _item_estimated_dates in self.estimated_dates:
                if _item_estimated_dates:
                    _items.append(_item_estimated_dates.to_dict())
            _dict['estimatedDates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in schedule_lines (list)
        _items = []
        if self.schedule_lines:
            for _item_schedule_lines in self.schedule_lines:
                if _item_schedule_lines:
                    _items.append(_item_schedule_lines.to_dict())
            _dict['scheduleLines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in multiple_shipments (list)
        _items = []
        if self.multiple_shipments:
            for _item_multiple_shipments in self.multiple_shipments:
                if _item_multiple_shipments:
                    _items.append(_item_multiple_shipments.to_dict())
            _dict['multipleShipments'] = _items
        # set to None if shipment_details (nullable) is None
        # and model_fields_set contains the field
        if self.shipment_details is None and "shipment_details" in self.model_fields_set:
            _dict['shipmentDetails'] = None

        # set to None if additional_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.additional_attributes is None and "additional_attributes" in self.model_fields_set:
            _dict['additionalAttributes'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderDetailB2BLinesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subOrderNumber": obj.get("subOrderNumber"),
            "ingramOrderLineNumber": obj.get("ingramOrderLineNumber"),
            "vendorSalesOrderLineNumber": obj.get("vendorSalesOrderLineNumber"),
            "customerLineNumber": obj.get("customerLineNumber"),
            "lineStatus": obj.get("lineStatus"),
            "ingramPartNumber": obj.get("ingramPartNumber"),
            "vendorPartNumber": obj.get("vendorPartNumber"),
            "vendorName": obj.get("vendorName"),
            "partDescription": obj.get("partDescription"),
            "unitWeight": obj.get("unitWeight"),
            "weightUom": obj.get("weightUom"),
            "unitPrice": obj.get("unitPrice"),
            "upcCode": obj.get("upcCode"),
            "extendedPrice": obj.get("extendedPrice"),
            "taxAmount": obj.get("taxAmount"),
            "currencyCode": obj.get("currencyCode"),
            "quantityOrdered": obj.get("quantityOrdered"),
            "quantityConfirmed": obj.get("quantityConfirmed"),
            "quantityBackOrdered": obj.get("quantityBackOrdered"),
            "specialBidNumber": obj.get("specialBidNumber"),
            "requestedDeliverydate": obj.get("requestedDeliverydate"),
            "promisedDeliveryDate": obj.get("promisedDeliveryDate"),
            "backOrderETADate": obj.get("backOrderETADate"),
            "lineNotes": obj.get("lineNotes"),
            "shipmentDetails": [OrderDetailB2BLinesInnerShipmentDetailsInner.from_dict(_item) for _item in obj["shipmentDetails"]] if obj.get("shipmentDetails") is not None else None,
            "serviceContractInfo": OrderDetailB2BLinesInnerServiceContractInfo.from_dict(obj["serviceContractInfo"]) if obj.get("serviceContractInfo") is not None else None,
            "additionalAttributes": [OrderDetailB2BLinesInnerAdditionalAttributesInner.from_dict(_item) for _item in obj["additionalAttributes"]] if obj.get("additionalAttributes") is not None else None,
            "links": [OrderDetailB2BLinesInnerLinksInner.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "estimatedDates": [OrderDetailB2BLinesInnerEstimatedDatesInner.from_dict(_item) for _item in obj["estimatedDates"]] if obj.get("estimatedDates") is not None else None,
            "scheduleLines": [OrderDetailB2BLinesInnerScheduleLinesInner.from_dict(_item) for _item in obj["scheduleLines"]] if obj.get("scheduleLines") is not None else None,
            "multipleShipments": [OrderDetailB2BLinesInnerMultipleShipmentsInner.from_dict(_item) for _item in obj["multipleShipments"]] if obj.get("multipleShipments") is not None else None,
            "defaultCarrierName": obj.get("defaultCarrierName")
        })
        return _obj


