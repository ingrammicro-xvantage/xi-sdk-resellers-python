# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class QuoteDetailsResponseProductsInnerPriceDiscountsInner(BaseModel):
    """
    QuoteDetailsResponseProductsInnerPriceDiscountsInner
    """ # noqa: E501
    type: Optional[StrictStr] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    expiration_date: Optional[StrictStr] = Field(default=None, alias="expirationDate")
    description: Optional[StrictStr] = None
    avaliable_qunatity: Optional[StrictInt] = Field(default=None, alias="avaliableQunatity")
    minimum_quantity: Optional[StrictInt] = Field(default=None, alias="minimumQuantity")
    bid_number: Optional[StrictStr] = Field(default=None, alias="bidNumber")
    bid_version: Optional[StrictStr] = Field(default=None, alias="bidVersion")
    valid_from: Optional[StrictStr] = Field(default=None, alias="validFrom")
    valid_to: Optional[StrictStr] = Field(default=None, alias="validTo")
    discount_off_list: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="discountOffList")
    __properties: ClassVar[List[str]] = ["type", "amount", "expirationDate", "description", "avaliableQunatity", "minimumQuantity", "bidNumber", "bidVersion", "validFrom", "validTo", "discountOffList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuoteDetailsResponseProductsInnerPriceDiscountsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuoteDetailsResponseProductsInnerPriceDiscountsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "amount": obj.get("amount"),
            "expirationDate": obj.get("expirationDate"),
            "description": obj.get("description"),
            "avaliableQunatity": obj.get("avaliableQunatity"),
            "minimumQuantity": obj.get("minimumQuantity"),
            "bidNumber": obj.get("bidNumber"),
            "bidVersion": obj.get("bidVersion"),
            "validFrom": obj.get("validFrom"),
            "validTo": obj.get("validTo"),
            "discountOffList": obj.get("discountOffList")
        })
        return _obj


