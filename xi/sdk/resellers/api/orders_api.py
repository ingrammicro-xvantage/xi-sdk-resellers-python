# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from xi.sdk.resellers.models.order_create_request import OrderCreateRequest
from xi.sdk.resellers.models.order_create_response import OrderCreateResponse
from xi.sdk.resellers.models.order_create_v7_request import OrderCreateV7Request
from xi.sdk.resellers.models.order_create_v7_response201 import OrderCreateV7Response201
from xi.sdk.resellers.models.order_detail_b2_b import OrderDetailB2B
from xi.sdk.resellers.models.order_modify_request import OrderModifyRequest
from xi.sdk.resellers.models.order_modify_response import OrderModifyResponse
from xi.sdk.resellers.models.order_search_response import OrderSearchResponse

from xi.sdk.resellers.api_client import ApiClient, RequestSerialized
from xi.sdk.resellers.api_response import ApiResponse
from xi.sdk.resellers.rest import RESTResponseType


class OrdersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_ordercancel(
        self,
        order_number: Annotated[StrictStr, Field(description="Ingram Micro sales order number.")],
        im_customer_number: Annotated[StrictStr, Field(description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        region_code: Annotated[Optional[StrictStr], Field(description="Region code for sandbox testing - Not for use in production.")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Cancel your Order

        This call must be submitted before the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.

        :param order_number: Ingram Micro sales order number. (required)
        :type order_number: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param region_code: Region code for sandbox testing - Not for use in production.
        :type region_code: str
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_ordercancel_serialize(
            order_number=order_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            region_code=region_code,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_ordercancel_with_http_info(
        self,
        order_number: Annotated[StrictStr, Field(description="Ingram Micro sales order number.")],
        im_customer_number: Annotated[StrictStr, Field(description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        region_code: Annotated[Optional[StrictStr], Field(description="Region code for sandbox testing - Not for use in production.")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Cancel your Order

        This call must be submitted before the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.

        :param order_number: Ingram Micro sales order number. (required)
        :type order_number: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param region_code: Region code for sandbox testing - Not for use in production.
        :type region_code: str
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_ordercancel_serialize(
            order_number=order_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            region_code=region_code,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_ordercancel_without_preload_content(
        self,
        order_number: Annotated[StrictStr, Field(description="Ingram Micro sales order number.")],
        im_customer_number: Annotated[StrictStr, Field(description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        region_code: Annotated[Optional[StrictStr], Field(description="Region code for sandbox testing - Not for use in production.")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel your Order

        This call must be submitted before the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.

        :param order_number: Ingram Micro sales order number. (required)
        :type order_number: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param region_code: Region code for sandbox testing - Not for use in production.
        :type region_code: str
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_ordercancel_serialize(
            order_number=order_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            region_code=region_code,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_ordercancel_serialize(
        self,
        order_number,
        im_customer_number,
        im_country_code,
        im_correlation_id,
        region_code,
        im_sender_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if order_number is not None:
            _path_params['OrderNumber'] = order_number
        # process the query parameters
        if region_code is not None:
            
            _query_params.append(('regionCode', region_code))
            
        # process the header parameters
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        if im_sender_id is not None:
            _header_params['IM-SenderID'] = im_sender_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/resellers/v6/orders/{OrderNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_orderdetails_v6_1(
        self,
        ordernumber: Annotated[str, Field(strict=True, max_length=12, description="The Ingram Micro sales order number.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany.")] = None,
        ingram_order_date: Annotated[Optional[date], Field(description="The date and time in UTC format that the order was created.")] = None,
        vendor_number: Annotated[Optional[StrictStr], Field(description="Vendor Number.")] = None,
        simulate_status: Annotated[Optional[StrictStr], Field(description="Order response for various order statuses. Not for use in production.")] = None,
        is_iml: Annotated[Optional[StrictBool], Field(description="True/False only for IML customers.")] = None,
        region_code: Annotated[Optional[StrictStr], Field(description="Region code for sandbox testing - Not for use in production.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderDetailB2B:
        """Get Order Details v6.1

        The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.<br><br>*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. <br><br> Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  

        :param ordernumber: The Ingram Micro sales order number. (required)
        :type ordernumber: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany.
        :type im_sender_id: str
        :param ingram_order_date: The date and time in UTC format that the order was created.
        :type ingram_order_date: date
        :param vendor_number: Vendor Number.
        :type vendor_number: str
        :param simulate_status: Order response for various order statuses. Not for use in production.
        :type simulate_status: str
        :param is_iml: True/False only for IML customers.
        :type is_iml: bool
        :param region_code: Region code for sandbox testing - Not for use in production.
        :type region_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_orderdetails_v6_1_serialize(
            ordernumber=ordernumber,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_sender_id=im_sender_id,
            ingram_order_date=ingram_order_date,
            vendor_number=vendor_number,
            simulate_status=simulate_status,
            is_iml=is_iml,
            region_code=region_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderDetailB2B",
            '500': "ErrorResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_orderdetails_v6_1_with_http_info(
        self,
        ordernumber: Annotated[str, Field(strict=True, max_length=12, description="The Ingram Micro sales order number.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany.")] = None,
        ingram_order_date: Annotated[Optional[date], Field(description="The date and time in UTC format that the order was created.")] = None,
        vendor_number: Annotated[Optional[StrictStr], Field(description="Vendor Number.")] = None,
        simulate_status: Annotated[Optional[StrictStr], Field(description="Order response for various order statuses. Not for use in production.")] = None,
        is_iml: Annotated[Optional[StrictBool], Field(description="True/False only for IML customers.")] = None,
        region_code: Annotated[Optional[StrictStr], Field(description="Region code for sandbox testing - Not for use in production.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderDetailB2B]:
        """Get Order Details v6.1

        The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.<br><br>*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. <br><br> Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  

        :param ordernumber: The Ingram Micro sales order number. (required)
        :type ordernumber: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany.
        :type im_sender_id: str
        :param ingram_order_date: The date and time in UTC format that the order was created.
        :type ingram_order_date: date
        :param vendor_number: Vendor Number.
        :type vendor_number: str
        :param simulate_status: Order response for various order statuses. Not for use in production.
        :type simulate_status: str
        :param is_iml: True/False only for IML customers.
        :type is_iml: bool
        :param region_code: Region code for sandbox testing - Not for use in production.
        :type region_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_orderdetails_v6_1_serialize(
            ordernumber=ordernumber,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_sender_id=im_sender_id,
            ingram_order_date=ingram_order_date,
            vendor_number=vendor_number,
            simulate_status=simulate_status,
            is_iml=is_iml,
            region_code=region_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderDetailB2B",
            '500': "ErrorResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_orderdetails_v6_1_without_preload_content(
        self,
        ordernumber: Annotated[str, Field(strict=True, max_length=12, description="The Ingram Micro sales order number.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany.")] = None,
        ingram_order_date: Annotated[Optional[date], Field(description="The date and time in UTC format that the order was created.")] = None,
        vendor_number: Annotated[Optional[StrictStr], Field(description="Vendor Number.")] = None,
        simulate_status: Annotated[Optional[StrictStr], Field(description="Order response for various order statuses. Not for use in production.")] = None,
        is_iml: Annotated[Optional[StrictBool], Field(description="True/False only for IML customers.")] = None,
        region_code: Annotated[Optional[StrictStr], Field(description="Region code for sandbox testing - Not for use in production.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Order Details v6.1

        The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.<br><br>*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. <br><br> Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  

        :param ordernumber: The Ingram Micro sales order number. (required)
        :type ordernumber: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany.
        :type im_sender_id: str
        :param ingram_order_date: The date and time in UTC format that the order was created.
        :type ingram_order_date: date
        :param vendor_number: Vendor Number.
        :type vendor_number: str
        :param simulate_status: Order response for various order statuses. Not for use in production.
        :type simulate_status: str
        :param is_iml: True/False only for IML customers.
        :type is_iml: bool
        :param region_code: Region code for sandbox testing - Not for use in production.
        :type region_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_orderdetails_v6_1_serialize(
            ordernumber=ordernumber,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_sender_id=im_sender_id,
            ingram_order_date=ingram_order_date,
            vendor_number=vendor_number,
            simulate_status=simulate_status,
            is_iml=is_iml,
            region_code=region_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderDetailB2B",
            '500': "ErrorResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_orderdetails_v6_1_serialize(
        self,
        ordernumber,
        im_customer_number,
        im_country_code,
        im_correlation_id,
        im_sender_id,
        ingram_order_date,
        vendor_number,
        simulate_status,
        is_iml,
        region_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ordernumber is not None:
            _path_params['ordernumber'] = ordernumber
        # process the query parameters
        if ingram_order_date is not None:
            if isinstance(ingram_order_date, date):
                _query_params.append(
                    (
                        'ingramOrderDate',
                        ingram_order_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('ingramOrderDate', ingram_order_date))
            
        if vendor_number is not None:
            
            _query_params.append(('vendorNumber', vendor_number))
            
        if simulate_status is not None:
            
            _query_params.append(('simulateStatus', simulate_status))
            
        if is_iml is not None:
            
            _query_params.append(('isIml', is_iml))
            
        if region_code is not None:
            
            _query_params.append(('regionCode', region_code))
            
        # process the header parameters
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        if im_sender_id is not None:
            _header_params['IM-SenderID'] = im_sender_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/resellers/v6.1/orders/{ordernumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_resellers_v6_ordersearch(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        ingram_order_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=11)]], Field(description="The Ingram Micro order number.")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Ingram Micro order status.")] = None,
        order_status_in: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Ingram Micro order status(can use it for multiple entries).")] = None,
        ingram_order_date: Annotated[Optional[StrictStr], Field(description="Search by Order date(yyyy-MM-dd).")] = None,
        ingram_order_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Search with the start and end date(only 2 entries allowed).")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        customer_order_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Search using your PO/Order number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of records required in the call - max records 100 per page.")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="The page number reference.")] = None,
        end_customer_order_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="End customer/user purchase order number.")] = None,
        invoice_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia.")] = None,
        ship_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Shipment date of order, search with the start and end date(only 2 entries allowed).")] = None,
        delivery_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia")] = None,
        ingram_part_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Ingram Micro unique part number for the product.")] = None,
        vendor_part_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Vendor’s part number for the product.")] = None,
        serial_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="A serial number of the product.")] = None,
        tracking_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="The tracking number of the order.*Currently, this feature is not available in Australia")] = None,
        vendor_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Name of the vendor.")] = None,
        special_bid_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderSearchResponse:
        """Search your Orders

        The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.

        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param ingram_order_number: The Ingram Micro order number.
        :type ingram_order_number: str
        :param order_status: Ingram Micro order status.
        :type order_status: str
        :param order_status_in: Ingram Micro order status(can use it for multiple entries).
        :type order_status_in: List[str]
        :param ingram_order_date: Search by Order date(yyyy-MM-dd).
        :type ingram_order_date: str
        :param ingram_order_date_bt: Search with the start and end date(only 2 entries allowed).
        :type ingram_order_date_bt: List[str]
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param customer_order_number: Search using your PO/Order number.
        :type customer_order_number: str
        :param page_size: The number of records required in the call - max records 100 per page.
        :type page_size: int
        :param page_number: The page number reference.
        :type page_number: int
        :param end_customer_order_number: End customer/user purchase order number.
        :type end_customer_order_number: str
        :param invoice_date_bt: Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia.
        :type invoice_date_bt: List[str]
        :param ship_date_bt: Shipment date of order, search with the start and end date(only 2 entries allowed).
        :type ship_date_bt: List[str]
        :param delivery_date_bt: The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia
        :type delivery_date_bt: List[str]
        :param ingram_part_number: Ingram Micro unique part number for the product.
        :type ingram_part_number: str
        :param vendor_part_number: Vendor’s part number for the product.
        :type vendor_part_number: str
        :param serial_number: A serial number of the product.
        :type serial_number: str
        :param tracking_number: The tracking number of the order.*Currently, this feature is not available in Australia
        :type tracking_number: str
        :param vendor_name: Name of the vendor.
        :type vendor_name: str
        :param special_bid_number: The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia
        :type special_bid_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resellers_v6_ordersearch_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            ingram_order_number=ingram_order_number,
            order_status=order_status,
            order_status_in=order_status_in,
            ingram_order_date=ingram_order_date,
            ingram_order_date_bt=ingram_order_date_bt,
            im_sender_id=im_sender_id,
            customer_order_number=customer_order_number,
            page_size=page_size,
            page_number=page_number,
            end_customer_order_number=end_customer_order_number,
            invoice_date_bt=invoice_date_bt,
            ship_date_bt=ship_date_bt,
            delivery_date_bt=delivery_date_bt,
            ingram_part_number=ingram_part_number,
            vendor_part_number=vendor_part_number,
            serial_number=serial_number,
            tracking_number=tracking_number,
            vendor_name=vendor_name,
            special_bid_number=special_bid_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderSearchResponse",
            '204': None,
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_resellers_v6_ordersearch_with_http_info(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        ingram_order_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=11)]], Field(description="The Ingram Micro order number.")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Ingram Micro order status.")] = None,
        order_status_in: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Ingram Micro order status(can use it for multiple entries).")] = None,
        ingram_order_date: Annotated[Optional[StrictStr], Field(description="Search by Order date(yyyy-MM-dd).")] = None,
        ingram_order_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Search with the start and end date(only 2 entries allowed).")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        customer_order_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Search using your PO/Order number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of records required in the call - max records 100 per page.")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="The page number reference.")] = None,
        end_customer_order_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="End customer/user purchase order number.")] = None,
        invoice_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia.")] = None,
        ship_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Shipment date of order, search with the start and end date(only 2 entries allowed).")] = None,
        delivery_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia")] = None,
        ingram_part_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Ingram Micro unique part number for the product.")] = None,
        vendor_part_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Vendor’s part number for the product.")] = None,
        serial_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="A serial number of the product.")] = None,
        tracking_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="The tracking number of the order.*Currently, this feature is not available in Australia")] = None,
        vendor_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Name of the vendor.")] = None,
        special_bid_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderSearchResponse]:
        """Search your Orders

        The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.

        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param ingram_order_number: The Ingram Micro order number.
        :type ingram_order_number: str
        :param order_status: Ingram Micro order status.
        :type order_status: str
        :param order_status_in: Ingram Micro order status(can use it for multiple entries).
        :type order_status_in: List[str]
        :param ingram_order_date: Search by Order date(yyyy-MM-dd).
        :type ingram_order_date: str
        :param ingram_order_date_bt: Search with the start and end date(only 2 entries allowed).
        :type ingram_order_date_bt: List[str]
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param customer_order_number: Search using your PO/Order number.
        :type customer_order_number: str
        :param page_size: The number of records required in the call - max records 100 per page.
        :type page_size: int
        :param page_number: The page number reference.
        :type page_number: int
        :param end_customer_order_number: End customer/user purchase order number.
        :type end_customer_order_number: str
        :param invoice_date_bt: Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia.
        :type invoice_date_bt: List[str]
        :param ship_date_bt: Shipment date of order, search with the start and end date(only 2 entries allowed).
        :type ship_date_bt: List[str]
        :param delivery_date_bt: The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia
        :type delivery_date_bt: List[str]
        :param ingram_part_number: Ingram Micro unique part number for the product.
        :type ingram_part_number: str
        :param vendor_part_number: Vendor’s part number for the product.
        :type vendor_part_number: str
        :param serial_number: A serial number of the product.
        :type serial_number: str
        :param tracking_number: The tracking number of the order.*Currently, this feature is not available in Australia
        :type tracking_number: str
        :param vendor_name: Name of the vendor.
        :type vendor_name: str
        :param special_bid_number: The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia
        :type special_bid_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resellers_v6_ordersearch_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            ingram_order_number=ingram_order_number,
            order_status=order_status,
            order_status_in=order_status_in,
            ingram_order_date=ingram_order_date,
            ingram_order_date_bt=ingram_order_date_bt,
            im_sender_id=im_sender_id,
            customer_order_number=customer_order_number,
            page_size=page_size,
            page_number=page_number,
            end_customer_order_number=end_customer_order_number,
            invoice_date_bt=invoice_date_bt,
            ship_date_bt=ship_date_bt,
            delivery_date_bt=delivery_date_bt,
            ingram_part_number=ingram_part_number,
            vendor_part_number=vendor_part_number,
            serial_number=serial_number,
            tracking_number=tracking_number,
            vendor_name=vendor_name,
            special_bid_number=special_bid_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderSearchResponse",
            '204': None,
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_resellers_v6_ordersearch_without_preload_content(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        ingram_order_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=11)]], Field(description="The Ingram Micro order number.")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Ingram Micro order status.")] = None,
        order_status_in: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Ingram Micro order status(can use it for multiple entries).")] = None,
        ingram_order_date: Annotated[Optional[StrictStr], Field(description="Search by Order date(yyyy-MM-dd).")] = None,
        ingram_order_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Search with the start and end date(only 2 entries allowed).")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        customer_order_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Search using your PO/Order number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of records required in the call - max records 100 per page.")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="The page number reference.")] = None,
        end_customer_order_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="End customer/user purchase order number.")] = None,
        invoice_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia.")] = None,
        ship_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Shipment date of order, search with the start and end date(only 2 entries allowed).")] = None,
        delivery_date_bt: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia")] = None,
        ingram_part_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Ingram Micro unique part number for the product.")] = None,
        vendor_part_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Vendor’s part number for the product.")] = None,
        serial_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="A serial number of the product.")] = None,
        tracking_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="The tracking number of the order.*Currently, this feature is not available in Australia")] = None,
        vendor_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="Name of the vendor.")] = None,
        special_bid_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=35)]], Field(description="The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search your Orders

        The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.

        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param ingram_order_number: The Ingram Micro order number.
        :type ingram_order_number: str
        :param order_status: Ingram Micro order status.
        :type order_status: str
        :param order_status_in: Ingram Micro order status(can use it for multiple entries).
        :type order_status_in: List[str]
        :param ingram_order_date: Search by Order date(yyyy-MM-dd).
        :type ingram_order_date: str
        :param ingram_order_date_bt: Search with the start and end date(only 2 entries allowed).
        :type ingram_order_date_bt: List[str]
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param customer_order_number: Search using your PO/Order number.
        :type customer_order_number: str
        :param page_size: The number of records required in the call - max records 100 per page.
        :type page_size: int
        :param page_number: The page number reference.
        :type page_number: int
        :param end_customer_order_number: End customer/user purchase order number.
        :type end_customer_order_number: str
        :param invoice_date_bt: Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia.
        :type invoice_date_bt: List[str]
        :param ship_date_bt: Shipment date of order, search with the start and end date(only 2 entries allowed).
        :type ship_date_bt: List[str]
        :param delivery_date_bt: The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia
        :type delivery_date_bt: List[str]
        :param ingram_part_number: Ingram Micro unique part number for the product.
        :type ingram_part_number: str
        :param vendor_part_number: Vendor’s part number for the product.
        :type vendor_part_number: str
        :param serial_number: A serial number of the product.
        :type serial_number: str
        :param tracking_number: The tracking number of the order.*Currently, this feature is not available in Australia
        :type tracking_number: str
        :param vendor_name: Name of the vendor.
        :type vendor_name: str
        :param special_bid_number: The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia
        :type special_bid_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resellers_v6_ordersearch_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            ingram_order_number=ingram_order_number,
            order_status=order_status,
            order_status_in=order_status_in,
            ingram_order_date=ingram_order_date,
            ingram_order_date_bt=ingram_order_date_bt,
            im_sender_id=im_sender_id,
            customer_order_number=customer_order_number,
            page_size=page_size,
            page_number=page_number,
            end_customer_order_number=end_customer_order_number,
            invoice_date_bt=invoice_date_bt,
            ship_date_bt=ship_date_bt,
            delivery_date_bt=delivery_date_bt,
            ingram_part_number=ingram_part_number,
            vendor_part_number=vendor_part_number,
            serial_number=serial_number,
            tracking_number=tracking_number,
            vendor_name=vendor_name,
            special_bid_number=special_bid_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderSearchResponse",
            '204': None,
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_resellers_v6_ordersearch_serialize(
        self,
        im_customer_number,
        im_country_code,
        im_correlation_id,
        ingram_order_number,
        order_status,
        order_status_in,
        ingram_order_date,
        ingram_order_date_bt,
        im_sender_id,
        customer_order_number,
        page_size,
        page_number,
        end_customer_order_number,
        invoice_date_bt,
        ship_date_bt,
        delivery_date_bt,
        ingram_part_number,
        vendor_part_number,
        serial_number,
        tracking_number,
        vendor_name,
        special_bid_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'orderStatus-in': 'multi',
            'ingramOrderDate-bt': 'multi',
            'invoiceDate_bt': 'multi',
            'shipDate_bt': 'multi',
            'deliveryDate_bt': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ingram_order_number is not None:
            
            _query_params.append(('ingramOrderNumber', ingram_order_number))
            
        if order_status is not None:
            
            _query_params.append(('orderStatus', order_status))
            
        if order_status_in is not None:
            
            _query_params.append(('orderStatus-in', order_status_in))
            
        if ingram_order_date is not None:
            
            _query_params.append(('ingramOrderDate', ingram_order_date))
            
        if ingram_order_date_bt is not None:
            
            _query_params.append(('ingramOrderDate-bt', ingram_order_date_bt))
            
        if customer_order_number is not None:
            
            _query_params.append(('customerOrderNumber', customer_order_number))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if end_customer_order_number is not None:
            
            _query_params.append(('endCustomerOrderNumber', end_customer_order_number))
            
        if invoice_date_bt is not None:
            
            _query_params.append(('invoiceDate_bt', invoice_date_bt))
            
        if ship_date_bt is not None:
            
            _query_params.append(('shipDate_bt', ship_date_bt))
            
        if delivery_date_bt is not None:
            
            _query_params.append(('deliveryDate_bt', delivery_date_bt))
            
        if ingram_part_number is not None:
            
            _query_params.append(('ingramPartNumber', ingram_part_number))
            
        if vendor_part_number is not None:
            
            _query_params.append(('vendorPartNumber', vendor_part_number))
            
        if serial_number is not None:
            
            _query_params.append(('serialNumber', serial_number))
            
        if tracking_number is not None:
            
            _query_params.append(('trackingNumber', tracking_number))
            
        if vendor_name is not None:
            
            _query_params.append(('vendorName', vendor_name))
            
        if special_bid_number is not None:
            
            _query_params.append(('specialBidNumber', special_bid_number))
            
        # process the header parameters
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        if im_sender_id is not None:
            _header_params['IM-SenderID'] = im_sender_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/resellers/v6/orders/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_createorder_v6(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        order_create_request: OrderCreateRequest,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderCreateResponse:
        """Create your Order

        Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 

        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param order_create_request: (required)
        :type order_create_request: OrderCreateRequest
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_createorder_v6_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            order_create_request=order_create_request,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "OrderCreateResponse",
            '207': "OrderCreateResponse",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_createorder_v6_with_http_info(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        order_create_request: OrderCreateRequest,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderCreateResponse]:
        """Create your Order

        Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 

        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param order_create_request: (required)
        :type order_create_request: OrderCreateRequest
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_createorder_v6_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            order_create_request=order_create_request,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "OrderCreateResponse",
            '207': "OrderCreateResponse",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_createorder_v6_without_preload_content(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems.")],
        order_create_request: OrderCreateRequest,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create your Order

        Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 

        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems. (required)
        :type im_correlation_id: str
        :param order_create_request: (required)
        :type order_create_request: OrderCreateRequest
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_createorder_v6_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            order_create_request=order_create_request,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "OrderCreateResponse",
            '207': "OrderCreateResponse",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_createorder_v6_serialize(
        self,
        im_customer_number,
        im_country_code,
        im_correlation_id,
        order_create_request,
        im_sender_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if im_sender_id is not None:
            _header_params['IM-SenderID'] = im_sender_id
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        # process the form parameters
        # process the body parameter
        if order_create_request is not None:
            _body_params = order_create_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/resellers/v6/orders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_createorder_v7(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        order_create_v7_request: OrderCreateV7Request,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderCreateV7Response201:
        """Create your Order v7

        The Order Create v7 allows our customers to create orders asynchronously. The customer can create either standard orders using stocked SKUs and/or create a “Quote to Order” using the existing quote which is in “Ready to Order” status, or the customer can create an order using the “Configure to order” (CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. <br > <br > Once the order is processed, Ingram Micro will notify customers via webhook using a pre-defined callback URL as an HTTP post regarding the updates related to the order. Upon successful order creation, a notification will be sent via webhook regarding the order details, in the event of any error occurring during the order creation process, an error message will be delivered via webhook. Nightly system unavailability will delay response Async response. <br > <br > The key differentiator between standard ordering and “Quote To Order” is the optional input field in the request body which is “quoteNumber”. If a customer passes the quote number in the request body, the order will be processed as a “Quote To Order” using the details from the quote. Any SKUs, quantity, or price information that are passed in the lines object within the request will be ignored in the case of “Quote To Order”.<br > <br > **Prerequisite:** Pre-defined callback URL <br > <br > **Standard ordering::**<br><br>Ingram Micro recommends that you provide the ingramPartNumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net 30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. <br><br>[**Key differences between v6 and v7 Migration**](https://developer.ingrammicro.com/reseller/page/v6-and-v7-migration) <br><br> <br><br>**Quote to Order / Configure to Order:**<br><br>If customers are planning to use Quote to Order or Configure to Order Quotes, it’s recommended to validate the quote using the “Validate Quote” endpoint before creating an order using the quote. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer needs to pass to the Quote to Order endpoint request. For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. <br><br> **How it works:**<br><br>- The customer validates the quote with a quote number from the Validate Quote endpoint.<br>- The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body.<br>- The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order.<br>- After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.

        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param order_create_v7_request: (required)
        :type order_create_v7_request: OrderCreateV7Request
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_createorder_v7_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            order_create_v7_request=order_create_v7_request,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderCreateV7Response201",
            '201': "OrderCreateV7Response",
            '400': "PostCreateorderV7400Response",
            '500': "PostCreateorderV7500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_createorder_v7_with_http_info(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        order_create_v7_request: OrderCreateV7Request,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderCreateV7Response201]:
        """Create your Order v7

        The Order Create v7 allows our customers to create orders asynchronously. The customer can create either standard orders using stocked SKUs and/or create a “Quote to Order” using the existing quote which is in “Ready to Order” status, or the customer can create an order using the “Configure to order” (CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. <br > <br > Once the order is processed, Ingram Micro will notify customers via webhook using a pre-defined callback URL as an HTTP post regarding the updates related to the order. Upon successful order creation, a notification will be sent via webhook regarding the order details, in the event of any error occurring during the order creation process, an error message will be delivered via webhook. Nightly system unavailability will delay response Async response. <br > <br > The key differentiator between standard ordering and “Quote To Order” is the optional input field in the request body which is “quoteNumber”. If a customer passes the quote number in the request body, the order will be processed as a “Quote To Order” using the details from the quote. Any SKUs, quantity, or price information that are passed in the lines object within the request will be ignored in the case of “Quote To Order”.<br > <br > **Prerequisite:** Pre-defined callback URL <br > <br > **Standard ordering::**<br><br>Ingram Micro recommends that you provide the ingramPartNumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net 30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. <br><br>[**Key differences between v6 and v7 Migration**](https://developer.ingrammicro.com/reseller/page/v6-and-v7-migration) <br><br> <br><br>**Quote to Order / Configure to Order:**<br><br>If customers are planning to use Quote to Order or Configure to Order Quotes, it’s recommended to validate the quote using the “Validate Quote” endpoint before creating an order using the quote. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer needs to pass to the Quote to Order endpoint request. For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. <br><br> **How it works:**<br><br>- The customer validates the quote with a quote number from the Validate Quote endpoint.<br>- The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body.<br>- The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order.<br>- After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.

        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param order_create_v7_request: (required)
        :type order_create_v7_request: OrderCreateV7Request
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_createorder_v7_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            order_create_v7_request=order_create_v7_request,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderCreateV7Response201",
            '201': "OrderCreateV7Response",
            '400': "PostCreateorderV7400Response",
            '500': "PostCreateorderV7500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_createorder_v7_without_preload_content(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        order_create_v7_request: OrderCreateV7Request,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create your Order v7

        The Order Create v7 allows our customers to create orders asynchronously. The customer can create either standard orders using stocked SKUs and/or create a “Quote to Order” using the existing quote which is in “Ready to Order” status, or the customer can create an order using the “Configure to order” (CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. <br > <br > Once the order is processed, Ingram Micro will notify customers via webhook using a pre-defined callback URL as an HTTP post regarding the updates related to the order. Upon successful order creation, a notification will be sent via webhook regarding the order details, in the event of any error occurring during the order creation process, an error message will be delivered via webhook. Nightly system unavailability will delay response Async response. <br > <br > The key differentiator between standard ordering and “Quote To Order” is the optional input field in the request body which is “quoteNumber”. If a customer passes the quote number in the request body, the order will be processed as a “Quote To Order” using the details from the quote. Any SKUs, quantity, or price information that are passed in the lines object within the request will be ignored in the case of “Quote To Order”.<br > <br > **Prerequisite:** Pre-defined callback URL <br > <br > **Standard ordering::**<br><br>Ingram Micro recommends that you provide the ingramPartNumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net 30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. <br><br>[**Key differences between v6 and v7 Migration**](https://developer.ingrammicro.com/reseller/page/v6-and-v7-migration) <br><br> <br><br>**Quote to Order / Configure to Order:**<br><br>If customers are planning to use Quote to Order or Configure to Order Quotes, it’s recommended to validate the quote using the “Validate Quote” endpoint before creating an order using the quote. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer needs to pass to the Quote to Order endpoint request. For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. <br><br> **How it works:**<br><br>- The customer validates the quote with a quote number from the Validate Quote endpoint.<br>- The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body.<br>- The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order.<br>- After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.

        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param order_create_v7_request: (required)
        :type order_create_v7_request: OrderCreateV7Request
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_createorder_v7_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            order_create_v7_request=order_create_v7_request,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderCreateV7Response201",
            '201': "OrderCreateV7Response",
            '400': "PostCreateorderV7400Response",
            '500': "PostCreateorderV7500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_createorder_v7_serialize(
        self,
        im_customer_number,
        im_country_code,
        im_correlation_id,
        order_create_v7_request,
        im_sender_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if im_sender_id is not None:
            _header_params['IM-SenderID'] = im_sender_id
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        # process the form parameters
        # process the body parameter
        if order_create_v7_request is not None:
            _body_params = order_create_v7_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/resellers/v7/orders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_ordermodify(
        self,
        order_number: Annotated[StrictStr, Field(description="Ingram sales order number.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        order_modify_request: OrderModifyRequest,
        action_code: Annotated[Optional[StrictStr], Field(description="Action code to be used for order release.")] = None,
        region_code: Annotated[Optional[StrictStr], Field(description="Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderModifyResponse:
        """Modify your Order

        The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 

        :param order_number: Ingram sales order number. (required)
        :type order_number: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param order_modify_request: (required)
        :type order_modify_request: OrderModifyRequest
        :param action_code: Action code to be used for order release.
        :type action_code: str
        :param region_code: Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production
        :type region_code: str
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_ordermodify_serialize(
            order_number=order_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            order_modify_request=order_modify_request,
            action_code=action_code,
            region_code=region_code,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderModifyResponse",
            '201': "OrderModifyResponse",
            '207': "OrderModifyResponse",
            '400': "ErrorResponse",
            '401': None,
            '404': None,
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_ordermodify_with_http_info(
        self,
        order_number: Annotated[StrictStr, Field(description="Ingram sales order number.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        order_modify_request: OrderModifyRequest,
        action_code: Annotated[Optional[StrictStr], Field(description="Action code to be used for order release.")] = None,
        region_code: Annotated[Optional[StrictStr], Field(description="Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderModifyResponse]:
        """Modify your Order

        The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 

        :param order_number: Ingram sales order number. (required)
        :type order_number: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param order_modify_request: (required)
        :type order_modify_request: OrderModifyRequest
        :param action_code: Action code to be used for order release.
        :type action_code: str
        :param region_code: Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production
        :type region_code: str
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_ordermodify_serialize(
            order_number=order_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            order_modify_request=order_modify_request,
            action_code=action_code,
            region_code=region_code,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderModifyResponse",
            '201': "OrderModifyResponse",
            '207': "OrderModifyResponse",
            '400': "ErrorResponse",
            '401': None,
            '404': None,
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_ordermodify_without_preload_content(
        self,
        order_number: Annotated[StrictStr, Field(description="Ingram sales order number.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        order_modify_request: OrderModifyRequest,
        action_code: Annotated[Optional[StrictStr], Field(description="Action code to be used for order release.")] = None,
        region_code: Annotated[Optional[StrictStr], Field(description="Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Modify your Order

        The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 

        :param order_number: Ingram sales order number. (required)
        :type order_number: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param order_modify_request: (required)
        :type order_modify_request: OrderModifyRequest
        :param action_code: Action code to be used for order release.
        :type action_code: str
        :param region_code: Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production
        :type region_code: str
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_ordermodify_serialize(
            order_number=order_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            order_modify_request=order_modify_request,
            action_code=action_code,
            region_code=region_code,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderModifyResponse",
            '201': "OrderModifyResponse",
            '207': "OrderModifyResponse",
            '400': "ErrorResponse",
            '401': None,
            '404': None,
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_ordermodify_serialize(
        self,
        order_number,
        im_customer_number,
        im_country_code,
        im_correlation_id,
        order_modify_request,
        action_code,
        region_code,
        im_sender_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if order_number is not None:
            _path_params['orderNumber'] = order_number
        # process the query parameters
        if action_code is not None:
            
            _query_params.append(('actionCode', action_code))
            
        if region_code is not None:
            
            _query_params.append(('regionCode', region_code))
            
        # process the header parameters
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        if im_sender_id is not None:
            _header_params['IM-SenderID'] = im_sender_id
        # process the form parameters
        # process the body parameter
        if order_modify_request is not None:
            _body_params = order_modify_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/resellers/v6/orders/{orderNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


