# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from xi.sdk.resellers.models.invoice_detailsv61_response import InvoiceDetailsv61Response
from xi.sdk.resellers.models.invoice_search_response import InvoiceSearchResponse

from xi.sdk.resellers.api_client import ApiClient, RequestSerialized
from xi.sdk.resellers.api_response import ApiResponse
from xi.sdk.resellers.rest import RESTResponseType


class InvoicesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_invoicedetails_v6_1(
        self,
        invoice_number: Annotated[str, Field(strict=True, max_length=12, description="The Ingram Micro invoice number.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        im_application_id: Annotated[str, Field(strict=True, max_length=32, description="Unique value used to identify the sender of the transaction. Example: MyCompany.")],
        customer_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="it should be invoice or order")] = None,
        include_serial_numbers: Annotated[Optional[StrictBool], Field(description="if serial in the response send as true or else false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InvoiceDetailsv61Response:
        """Get Invoice Details v6.1

        Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .

        :param invoice_number: The Ingram Micro invoice number. (required)
        :type invoice_number: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param im_application_id: Unique value used to identify the sender of the transaction. Example: MyCompany. (required)
        :type im_application_id: str
        :param customer_type: it should be invoice or order
        :type customer_type: str
        :param include_serial_numbers: if serial in the response send as true or else false
        :type include_serial_numbers: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_invoicedetails_v6_1_serialize(
            invoice_number=invoice_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_application_id=im_application_id,
            customer_type=customer_type,
            include_serial_numbers=include_serial_numbers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InvoiceDetailsv61Response",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_invoicedetails_v6_1_with_http_info(
        self,
        invoice_number: Annotated[str, Field(strict=True, max_length=12, description="The Ingram Micro invoice number.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        im_application_id: Annotated[str, Field(strict=True, max_length=32, description="Unique value used to identify the sender of the transaction. Example: MyCompany.")],
        customer_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="it should be invoice or order")] = None,
        include_serial_numbers: Annotated[Optional[StrictBool], Field(description="if serial in the response send as true or else false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InvoiceDetailsv61Response]:
        """Get Invoice Details v6.1

        Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .

        :param invoice_number: The Ingram Micro invoice number. (required)
        :type invoice_number: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param im_application_id: Unique value used to identify the sender of the transaction. Example: MyCompany. (required)
        :type im_application_id: str
        :param customer_type: it should be invoice or order
        :type customer_type: str
        :param include_serial_numbers: if serial in the response send as true or else false
        :type include_serial_numbers: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_invoicedetails_v6_1_serialize(
            invoice_number=invoice_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_application_id=im_application_id,
            customer_type=customer_type,
            include_serial_numbers=include_serial_numbers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InvoiceDetailsv61Response",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_invoicedetails_v6_1_without_preload_content(
        self,
        invoice_number: Annotated[str, Field(strict=True, max_length=12, description="The Ingram Micro invoice number.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        im_application_id: Annotated[str, Field(strict=True, max_length=32, description="Unique value used to identify the sender of the transaction. Example: MyCompany.")],
        customer_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="it should be invoice or order")] = None,
        include_serial_numbers: Annotated[Optional[StrictBool], Field(description="if serial in the response send as true or else false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Invoice Details v6.1

        Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .

        :param invoice_number: The Ingram Micro invoice number. (required)
        :type invoice_number: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param im_application_id: Unique value used to identify the sender of the transaction. Example: MyCompany. (required)
        :type im_application_id: str
        :param customer_type: it should be invoice or order
        :type customer_type: str
        :param include_serial_numbers: if serial in the response send as true or else false
        :type include_serial_numbers: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_invoicedetails_v6_1_serialize(
            invoice_number=invoice_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_application_id=im_application_id,
            customer_type=customer_type,
            include_serial_numbers=include_serial_numbers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InvoiceDetailsv61Response",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_invoicedetails_v6_1_serialize(
        self,
        invoice_number,
        im_customer_number,
        im_country_code,
        im_correlation_id,
        im_application_id,
        customer_type,
        include_serial_numbers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if invoice_number is not None:
            _path_params['invoiceNumber'] = invoice_number
        # process the query parameters
        if customer_type is not None:
            
            _query_params.append(('customerType', customer_type))
            
        if include_serial_numbers is not None:
            
            _query_params.append(('includeSerialNumbers', include_serial_numbers))
            
        # process the header parameters
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        if im_application_id is not None:
            _header_params['IM-ApplicationID'] = im_application_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/resellers/v6.1/invoices/{invoiceNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_resellers_v6_invoicesearch(
        self,
        im_application_id: Annotated[str, Field(strict=True, max_length=32, description="Unique value used to identify the sender of the transaction. Example: MyCompany")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        payment_terms_net_date: Annotated[Optional[StrictStr], Field(description="Search by payment terms net date(yyyy-MM-dd).")] = None,
        invoice_date: Annotated[Optional[StrictStr], Field(description="Search by invoice date(yyyy-MM-dd).")] = None,
        invoice_due_date: Annotated[Optional[StrictStr], Field(description="Search by invoice date from(yyyy-MM-dd).")] = None,
        order_date: Annotated[Optional[StrictStr], Field(description="Search by OrderDate date(yyyy-MM-dd).")] = None,
        order_from_date: Annotated[Optional[StrictStr], Field(description="Search by OrderFromDate date(yyyy-MM-dd).")] = None,
        order_to_date: Annotated[Optional[StrictStr], Field(description="Search by OrderToDate date(yyyy-MM-dd).")] = None,
        order_number: Annotated[Optional[StrictStr], Field(description="Search by order number")] = None,
        delivery_number: Annotated[Optional[StrictStr], Field(description="Search by delivery number.")] = None,
        invoice_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=11)]], Field(description="The Ingram Micro invoice number.")] = None,
        invoice_status: Annotated[Optional[StrictStr], Field(description="Ingram Micro invoice status.")] = None,
        invoice_type: Annotated[Optional[StrictStr], Field(description="Ingram Micro InvoiceType.")] = None,
        customer_order_number: Annotated[Optional[StrictStr], Field(description="Ingram Micro CustomerOrderNumber.")] = None,
        end_customer_order_number: Annotated[Optional[StrictStr], Field(description="Ingram Micro EndCustomerOrderNumber.")] = None,
        special_bid_number: Annotated[Optional[StrictStr], Field(description="Ingram Micro SpecialBidNumber.")] = None,
        invoice_from_due_date: Annotated[Optional[StrictStr], Field(description="Search by invoice due date from(yyyy-MM-dd).")] = None,
        invoice_to_due_date: Annotated[Optional[StrictStr], Field(description="Search by invoice due date to(yyyy-MM-dd).")] = None,
        invoice_from_date: Annotated[Optional[List[StrictStr]], Field(description="Search by invoice date from(yyyy-MM-dd).")] = None,
        invoice_to_date: Annotated[Optional[List[StrictStr]], Field(description="Search by invoice date To(yyyy-MM-dd).")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of records required in the call - max records 100 per page.")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="The page number reference.")] = None,
        orderby: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Column name with which we want to sort.")] = None,
        direction: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="asc or desc , along with orderby column result set will be sorted.")] = None,
        serial_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Serial number of the product.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InvoiceSearchResponse:
        """Search your invoice

        Search your Ingram Micro invoices. This endpoint searches by multiple invoice parameters and supports pagination of results.

        :param im_application_id: Unique value used to identify the sender of the transaction. Example: MyCompany (required)
        :type im_application_id: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param payment_terms_net_date: Search by payment terms net date(yyyy-MM-dd).
        :type payment_terms_net_date: str
        :param invoice_date: Search by invoice date(yyyy-MM-dd).
        :type invoice_date: str
        :param invoice_due_date: Search by invoice date from(yyyy-MM-dd).
        :type invoice_due_date: str
        :param order_date: Search by OrderDate date(yyyy-MM-dd).
        :type order_date: str
        :param order_from_date: Search by OrderFromDate date(yyyy-MM-dd).
        :type order_from_date: str
        :param order_to_date: Search by OrderToDate date(yyyy-MM-dd).
        :type order_to_date: str
        :param order_number: Search by order number
        :type order_number: str
        :param delivery_number: Search by delivery number.
        :type delivery_number: str
        :param invoice_number: The Ingram Micro invoice number.
        :type invoice_number: str
        :param invoice_status: Ingram Micro invoice status.
        :type invoice_status: str
        :param invoice_type: Ingram Micro InvoiceType.
        :type invoice_type: str
        :param customer_order_number: Ingram Micro CustomerOrderNumber.
        :type customer_order_number: str
        :param end_customer_order_number: Ingram Micro EndCustomerOrderNumber.
        :type end_customer_order_number: str
        :param special_bid_number: Ingram Micro SpecialBidNumber.
        :type special_bid_number: str
        :param invoice_from_due_date: Search by invoice due date from(yyyy-MM-dd).
        :type invoice_from_due_date: str
        :param invoice_to_due_date: Search by invoice due date to(yyyy-MM-dd).
        :type invoice_to_due_date: str
        :param invoice_from_date: Search by invoice date from(yyyy-MM-dd).
        :type invoice_from_date: List[str]
        :param invoice_to_date: Search by invoice date To(yyyy-MM-dd).
        :type invoice_to_date: List[str]
        :param page_size: Number of records required in the call - max records 100 per page.
        :type page_size: int
        :param page_number: The page number reference.
        :type page_number: int
        :param orderby: Column name with which we want to sort.
        :type orderby: str
        :param direction: asc or desc , along with orderby column result set will be sorted.
        :type direction: str
        :param serial_number: Serial number of the product.
        :type serial_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resellers_v6_invoicesearch_serialize(
            im_application_id=im_application_id,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            payment_terms_net_date=payment_terms_net_date,
            invoice_date=invoice_date,
            invoice_due_date=invoice_due_date,
            order_date=order_date,
            order_from_date=order_from_date,
            order_to_date=order_to_date,
            order_number=order_number,
            delivery_number=delivery_number,
            invoice_number=invoice_number,
            invoice_status=invoice_status,
            invoice_type=invoice_type,
            customer_order_number=customer_order_number,
            end_customer_order_number=end_customer_order_number,
            special_bid_number=special_bid_number,
            invoice_from_due_date=invoice_from_due_date,
            invoice_to_due_date=invoice_to_due_date,
            invoice_from_date=invoice_from_date,
            invoice_to_date=invoice_to_date,
            page_size=page_size,
            page_number=page_number,
            orderby=orderby,
            direction=direction,
            serial_number=serial_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InvoiceSearchResponse",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_resellers_v6_invoicesearch_with_http_info(
        self,
        im_application_id: Annotated[str, Field(strict=True, max_length=32, description="Unique value used to identify the sender of the transaction. Example: MyCompany")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        payment_terms_net_date: Annotated[Optional[StrictStr], Field(description="Search by payment terms net date(yyyy-MM-dd).")] = None,
        invoice_date: Annotated[Optional[StrictStr], Field(description="Search by invoice date(yyyy-MM-dd).")] = None,
        invoice_due_date: Annotated[Optional[StrictStr], Field(description="Search by invoice date from(yyyy-MM-dd).")] = None,
        order_date: Annotated[Optional[StrictStr], Field(description="Search by OrderDate date(yyyy-MM-dd).")] = None,
        order_from_date: Annotated[Optional[StrictStr], Field(description="Search by OrderFromDate date(yyyy-MM-dd).")] = None,
        order_to_date: Annotated[Optional[StrictStr], Field(description="Search by OrderToDate date(yyyy-MM-dd).")] = None,
        order_number: Annotated[Optional[StrictStr], Field(description="Search by order number")] = None,
        delivery_number: Annotated[Optional[StrictStr], Field(description="Search by delivery number.")] = None,
        invoice_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=11)]], Field(description="The Ingram Micro invoice number.")] = None,
        invoice_status: Annotated[Optional[StrictStr], Field(description="Ingram Micro invoice status.")] = None,
        invoice_type: Annotated[Optional[StrictStr], Field(description="Ingram Micro InvoiceType.")] = None,
        customer_order_number: Annotated[Optional[StrictStr], Field(description="Ingram Micro CustomerOrderNumber.")] = None,
        end_customer_order_number: Annotated[Optional[StrictStr], Field(description="Ingram Micro EndCustomerOrderNumber.")] = None,
        special_bid_number: Annotated[Optional[StrictStr], Field(description="Ingram Micro SpecialBidNumber.")] = None,
        invoice_from_due_date: Annotated[Optional[StrictStr], Field(description="Search by invoice due date from(yyyy-MM-dd).")] = None,
        invoice_to_due_date: Annotated[Optional[StrictStr], Field(description="Search by invoice due date to(yyyy-MM-dd).")] = None,
        invoice_from_date: Annotated[Optional[List[StrictStr]], Field(description="Search by invoice date from(yyyy-MM-dd).")] = None,
        invoice_to_date: Annotated[Optional[List[StrictStr]], Field(description="Search by invoice date To(yyyy-MM-dd).")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of records required in the call - max records 100 per page.")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="The page number reference.")] = None,
        orderby: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Column name with which we want to sort.")] = None,
        direction: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="asc or desc , along with orderby column result set will be sorted.")] = None,
        serial_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Serial number of the product.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InvoiceSearchResponse]:
        """Search your invoice

        Search your Ingram Micro invoices. This endpoint searches by multiple invoice parameters and supports pagination of results.

        :param im_application_id: Unique value used to identify the sender of the transaction. Example: MyCompany (required)
        :type im_application_id: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param payment_terms_net_date: Search by payment terms net date(yyyy-MM-dd).
        :type payment_terms_net_date: str
        :param invoice_date: Search by invoice date(yyyy-MM-dd).
        :type invoice_date: str
        :param invoice_due_date: Search by invoice date from(yyyy-MM-dd).
        :type invoice_due_date: str
        :param order_date: Search by OrderDate date(yyyy-MM-dd).
        :type order_date: str
        :param order_from_date: Search by OrderFromDate date(yyyy-MM-dd).
        :type order_from_date: str
        :param order_to_date: Search by OrderToDate date(yyyy-MM-dd).
        :type order_to_date: str
        :param order_number: Search by order number
        :type order_number: str
        :param delivery_number: Search by delivery number.
        :type delivery_number: str
        :param invoice_number: The Ingram Micro invoice number.
        :type invoice_number: str
        :param invoice_status: Ingram Micro invoice status.
        :type invoice_status: str
        :param invoice_type: Ingram Micro InvoiceType.
        :type invoice_type: str
        :param customer_order_number: Ingram Micro CustomerOrderNumber.
        :type customer_order_number: str
        :param end_customer_order_number: Ingram Micro EndCustomerOrderNumber.
        :type end_customer_order_number: str
        :param special_bid_number: Ingram Micro SpecialBidNumber.
        :type special_bid_number: str
        :param invoice_from_due_date: Search by invoice due date from(yyyy-MM-dd).
        :type invoice_from_due_date: str
        :param invoice_to_due_date: Search by invoice due date to(yyyy-MM-dd).
        :type invoice_to_due_date: str
        :param invoice_from_date: Search by invoice date from(yyyy-MM-dd).
        :type invoice_from_date: List[str]
        :param invoice_to_date: Search by invoice date To(yyyy-MM-dd).
        :type invoice_to_date: List[str]
        :param page_size: Number of records required in the call - max records 100 per page.
        :type page_size: int
        :param page_number: The page number reference.
        :type page_number: int
        :param orderby: Column name with which we want to sort.
        :type orderby: str
        :param direction: asc or desc , along with orderby column result set will be sorted.
        :type direction: str
        :param serial_number: Serial number of the product.
        :type serial_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resellers_v6_invoicesearch_serialize(
            im_application_id=im_application_id,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            payment_terms_net_date=payment_terms_net_date,
            invoice_date=invoice_date,
            invoice_due_date=invoice_due_date,
            order_date=order_date,
            order_from_date=order_from_date,
            order_to_date=order_to_date,
            order_number=order_number,
            delivery_number=delivery_number,
            invoice_number=invoice_number,
            invoice_status=invoice_status,
            invoice_type=invoice_type,
            customer_order_number=customer_order_number,
            end_customer_order_number=end_customer_order_number,
            special_bid_number=special_bid_number,
            invoice_from_due_date=invoice_from_due_date,
            invoice_to_due_date=invoice_to_due_date,
            invoice_from_date=invoice_from_date,
            invoice_to_date=invoice_to_date,
            page_size=page_size,
            page_number=page_number,
            orderby=orderby,
            direction=direction,
            serial_number=serial_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InvoiceSearchResponse",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_resellers_v6_invoicesearch_without_preload_content(
        self,
        im_application_id: Annotated[str, Field(strict=True, max_length=32, description="Unique value used to identify the sender of the transaction. Example: MyCompany")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        payment_terms_net_date: Annotated[Optional[StrictStr], Field(description="Search by payment terms net date(yyyy-MM-dd).")] = None,
        invoice_date: Annotated[Optional[StrictStr], Field(description="Search by invoice date(yyyy-MM-dd).")] = None,
        invoice_due_date: Annotated[Optional[StrictStr], Field(description="Search by invoice date from(yyyy-MM-dd).")] = None,
        order_date: Annotated[Optional[StrictStr], Field(description="Search by OrderDate date(yyyy-MM-dd).")] = None,
        order_from_date: Annotated[Optional[StrictStr], Field(description="Search by OrderFromDate date(yyyy-MM-dd).")] = None,
        order_to_date: Annotated[Optional[StrictStr], Field(description="Search by OrderToDate date(yyyy-MM-dd).")] = None,
        order_number: Annotated[Optional[StrictStr], Field(description="Search by order number")] = None,
        delivery_number: Annotated[Optional[StrictStr], Field(description="Search by delivery number.")] = None,
        invoice_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=11)]], Field(description="The Ingram Micro invoice number.")] = None,
        invoice_status: Annotated[Optional[StrictStr], Field(description="Ingram Micro invoice status.")] = None,
        invoice_type: Annotated[Optional[StrictStr], Field(description="Ingram Micro InvoiceType.")] = None,
        customer_order_number: Annotated[Optional[StrictStr], Field(description="Ingram Micro CustomerOrderNumber.")] = None,
        end_customer_order_number: Annotated[Optional[StrictStr], Field(description="Ingram Micro EndCustomerOrderNumber.")] = None,
        special_bid_number: Annotated[Optional[StrictStr], Field(description="Ingram Micro SpecialBidNumber.")] = None,
        invoice_from_due_date: Annotated[Optional[StrictStr], Field(description="Search by invoice due date from(yyyy-MM-dd).")] = None,
        invoice_to_due_date: Annotated[Optional[StrictStr], Field(description="Search by invoice due date to(yyyy-MM-dd).")] = None,
        invoice_from_date: Annotated[Optional[List[StrictStr]], Field(description="Search by invoice date from(yyyy-MM-dd).")] = None,
        invoice_to_date: Annotated[Optional[List[StrictStr]], Field(description="Search by invoice date To(yyyy-MM-dd).")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of records required in the call - max records 100 per page.")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="The page number reference.")] = None,
        orderby: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Column name with which we want to sort.")] = None,
        direction: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="asc or desc , along with orderby column result set will be sorted.")] = None,
        serial_number: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Serial number of the product.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search your invoice

        Search your Ingram Micro invoices. This endpoint searches by multiple invoice parameters and supports pagination of results.

        :param im_application_id: Unique value used to identify the sender of the transaction. Example: MyCompany (required)
        :type im_application_id: str
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param payment_terms_net_date: Search by payment terms net date(yyyy-MM-dd).
        :type payment_terms_net_date: str
        :param invoice_date: Search by invoice date(yyyy-MM-dd).
        :type invoice_date: str
        :param invoice_due_date: Search by invoice date from(yyyy-MM-dd).
        :type invoice_due_date: str
        :param order_date: Search by OrderDate date(yyyy-MM-dd).
        :type order_date: str
        :param order_from_date: Search by OrderFromDate date(yyyy-MM-dd).
        :type order_from_date: str
        :param order_to_date: Search by OrderToDate date(yyyy-MM-dd).
        :type order_to_date: str
        :param order_number: Search by order number
        :type order_number: str
        :param delivery_number: Search by delivery number.
        :type delivery_number: str
        :param invoice_number: The Ingram Micro invoice number.
        :type invoice_number: str
        :param invoice_status: Ingram Micro invoice status.
        :type invoice_status: str
        :param invoice_type: Ingram Micro InvoiceType.
        :type invoice_type: str
        :param customer_order_number: Ingram Micro CustomerOrderNumber.
        :type customer_order_number: str
        :param end_customer_order_number: Ingram Micro EndCustomerOrderNumber.
        :type end_customer_order_number: str
        :param special_bid_number: Ingram Micro SpecialBidNumber.
        :type special_bid_number: str
        :param invoice_from_due_date: Search by invoice due date from(yyyy-MM-dd).
        :type invoice_from_due_date: str
        :param invoice_to_due_date: Search by invoice due date to(yyyy-MM-dd).
        :type invoice_to_due_date: str
        :param invoice_from_date: Search by invoice date from(yyyy-MM-dd).
        :type invoice_from_date: List[str]
        :param invoice_to_date: Search by invoice date To(yyyy-MM-dd).
        :type invoice_to_date: List[str]
        :param page_size: Number of records required in the call - max records 100 per page.
        :type page_size: int
        :param page_number: The page number reference.
        :type page_number: int
        :param orderby: Column name with which we want to sort.
        :type orderby: str
        :param direction: asc or desc , along with orderby column result set will be sorted.
        :type direction: str
        :param serial_number: Serial number of the product.
        :type serial_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resellers_v6_invoicesearch_serialize(
            im_application_id=im_application_id,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            payment_terms_net_date=payment_terms_net_date,
            invoice_date=invoice_date,
            invoice_due_date=invoice_due_date,
            order_date=order_date,
            order_from_date=order_from_date,
            order_to_date=order_to_date,
            order_number=order_number,
            delivery_number=delivery_number,
            invoice_number=invoice_number,
            invoice_status=invoice_status,
            invoice_type=invoice_type,
            customer_order_number=customer_order_number,
            end_customer_order_number=end_customer_order_number,
            special_bid_number=special_bid_number,
            invoice_from_due_date=invoice_from_due_date,
            invoice_to_due_date=invoice_to_due_date,
            invoice_from_date=invoice_from_date,
            invoice_to_date=invoice_to_date,
            page_size=page_size,
            page_number=page_number,
            orderby=orderby,
            direction=direction,
            serial_number=serial_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InvoiceSearchResponse",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_resellers_v6_invoicesearch_serialize(
        self,
        im_application_id,
        im_customer_number,
        im_country_code,
        im_correlation_id,
        payment_terms_net_date,
        invoice_date,
        invoice_due_date,
        order_date,
        order_from_date,
        order_to_date,
        order_number,
        delivery_number,
        invoice_number,
        invoice_status,
        invoice_type,
        customer_order_number,
        end_customer_order_number,
        special_bid_number,
        invoice_from_due_date,
        invoice_to_due_date,
        invoice_from_date,
        invoice_to_date,
        page_size,
        page_number,
        orderby,
        direction,
        serial_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'invoiceFromDate': 'multi',
            'invoiceToDate': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if payment_terms_net_date is not None:
            
            _query_params.append(('paymentTermsNetDate', payment_terms_net_date))
            
        if invoice_date is not None:
            
            _query_params.append(('invoiceDate', invoice_date))
            
        if invoice_due_date is not None:
            
            _query_params.append(('invoiceDueDate', invoice_due_date))
            
        if order_date is not None:
            
            _query_params.append(('orderDate', order_date))
            
        if order_from_date is not None:
            
            _query_params.append(('orderFromDate', order_from_date))
            
        if order_to_date is not None:
            
            _query_params.append(('orderToDate', order_to_date))
            
        if order_number is not None:
            
            _query_params.append(('orderNumber', order_number))
            
        if delivery_number is not None:
            
            _query_params.append(('DeliveryNumber', delivery_number))
            
        if invoice_number is not None:
            
            _query_params.append(('invoiceNumber', invoice_number))
            
        if invoice_status is not None:
            
            _query_params.append(('invoiceStatus', invoice_status))
            
        if invoice_type is not None:
            
            _query_params.append(('invoiceType', invoice_type))
            
        if customer_order_number is not None:
            
            _query_params.append(('customerOrderNumber', customer_order_number))
            
        if end_customer_order_number is not None:
            
            _query_params.append(('endCustomerOrderNumber', end_customer_order_number))
            
        if special_bid_number is not None:
            
            _query_params.append(('specialBidNumber', special_bid_number))
            
        if invoice_from_due_date is not None:
            
            _query_params.append(('invoiceFromDueDate', invoice_from_due_date))
            
        if invoice_to_due_date is not None:
            
            _query_params.append(('invoiceToDueDate', invoice_to_due_date))
            
        if invoice_from_date is not None:
            
            _query_params.append(('invoiceFromDate', invoice_from_date))
            
        if invoice_to_date is not None:
            
            _query_params.append(('invoiceToDate', invoice_to_date))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if orderby is not None:
            
            _query_params.append(('orderby', orderby))
            
        if direction is not None:
            
            _query_params.append(('direction', direction))
            
        if serial_number is not None:
            
            _query_params.append(('serialNumber', serial_number))
            
        # process the header parameters
        if im_application_id is not None:
            _header_params['IM-ApplicationID'] = im_application_id
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/resellers/v6/invoices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


