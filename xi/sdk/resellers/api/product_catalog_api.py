# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from xi.sdk.resellers.models.price_and_availability_request import PriceAndAvailabilityRequest
from xi.sdk.resellers.models.price_and_availability_response_inner import PriceAndAvailabilityResponseInner
from xi.sdk.resellers.models.product_detail_response import ProductDetailResponse
from xi.sdk.resellers.models.product_search_response import ProductSearchResponse

from xi.sdk.resellers.api_client import ApiClient, RequestSerialized
from xi.sdk.resellers.api_response import ApiResponse
from xi.sdk.resellers.rest import RESTResponseType


class ProductCatalogApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_reseller_v6_productdetail(
        self,
        ingram_part_number: Annotated[str, Field(strict=True, max_length=6, description="Ingram Micro unique part number for the product")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems")],
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Sender Identification text")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductDetailResponse:
        """Product Details

        Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.

        :param ingram_part_number: Ingram Micro unique part number for the product (required)
        :type ingram_part_number: str
        :param im_customer_number: Your unique Ingram Micro customer number (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems (required)
        :type im_correlation_id: str
        :param im_sender_id: Sender Identification text
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reseller_v6_productdetail_serialize(
            ingram_part_number=ingram_part_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductDetailResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_reseller_v6_productdetail_with_http_info(
        self,
        ingram_part_number: Annotated[str, Field(strict=True, max_length=6, description="Ingram Micro unique part number for the product")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems")],
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Sender Identification text")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductDetailResponse]:
        """Product Details

        Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.

        :param ingram_part_number: Ingram Micro unique part number for the product (required)
        :type ingram_part_number: str
        :param im_customer_number: Your unique Ingram Micro customer number (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems (required)
        :type im_correlation_id: str
        :param im_sender_id: Sender Identification text
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reseller_v6_productdetail_serialize(
            ingram_part_number=ingram_part_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductDetailResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_reseller_v6_productdetail_without_preload_content(
        self,
        ingram_part_number: Annotated[str, Field(strict=True, max_length=6, description="Ingram Micro unique part number for the product")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems")],
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Sender Identification text")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Product Details

        Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.

        :param ingram_part_number: Ingram Micro unique part number for the product (required)
        :type ingram_part_number: str
        :param im_customer_number: Your unique Ingram Micro customer number (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems (required)
        :type im_correlation_id: str
        :param im_sender_id: Sender Identification text
        :type im_sender_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reseller_v6_productdetail_serialize(
            ingram_part_number=ingram_part_number,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_sender_id=im_sender_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductDetailResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_reseller_v6_productdetail_serialize(
        self,
        ingram_part_number,
        im_customer_number,
        im_country_code,
        im_correlation_id,
        im_sender_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ingram_part_number is not None:
            _path_params['ingramPartNumber'] = ingram_part_number
        # process the query parameters
        # process the header parameters
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if im_sender_id is not None:
            _header_params['IM-SenderID'] = im_sender_id
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/resellers/v6/catalog/details/{ingramPartNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_reseller_v6_productdetailcmp(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems")],
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Sender Identification text")] = None,
        plan_name: Annotated[Optional[StrictStr], Field(description="Name of the subscription plan")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Id of the subscription plan.   <span style='color:red'>To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.</span>")] = None,
        vendor_part_number: Annotated[Optional[StrictStr], Field(description="Vendor’s part number for the product.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductDetailResponse:
        """Product Details

        Search all the product-related details.

        :param im_customer_number: Your unique Ingram Micro customer number (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems (required)
        :type im_correlation_id: str
        :param im_sender_id: Sender Identification text
        :type im_sender_id: str
        :param plan_name: Name of the subscription plan
        :type plan_name: str
        :param plan_id: Id of the subscription plan.   <span style='color:red'>To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.</span>
        :type plan_id: str
        :param vendor_part_number: Vendor’s part number for the product.
        :type vendor_part_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reseller_v6_productdetailcmp_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_sender_id=im_sender_id,
            plan_name=plan_name,
            plan_id=plan_id,
            vendor_part_number=vendor_part_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductDetailResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_reseller_v6_productdetailcmp_with_http_info(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems")],
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Sender Identification text")] = None,
        plan_name: Annotated[Optional[StrictStr], Field(description="Name of the subscription plan")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Id of the subscription plan.   <span style='color:red'>To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.</span>")] = None,
        vendor_part_number: Annotated[Optional[StrictStr], Field(description="Vendor’s part number for the product.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductDetailResponse]:
        """Product Details

        Search all the product-related details.

        :param im_customer_number: Your unique Ingram Micro customer number (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems (required)
        :type im_correlation_id: str
        :param im_sender_id: Sender Identification text
        :type im_sender_id: str
        :param plan_name: Name of the subscription plan
        :type plan_name: str
        :param plan_id: Id of the subscription plan.   <span style='color:red'>To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.</span>
        :type plan_id: str
        :param vendor_part_number: Vendor’s part number for the product.
        :type vendor_part_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reseller_v6_productdetailcmp_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_sender_id=im_sender_id,
            plan_name=plan_name,
            plan_id=plan_id,
            vendor_part_number=vendor_part_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductDetailResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_reseller_v6_productdetailcmp_without_preload_content(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems")],
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Sender Identification text")] = None,
        plan_name: Annotated[Optional[StrictStr], Field(description="Name of the subscription plan")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Id of the subscription plan.   <span style='color:red'>To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.</span>")] = None,
        vendor_part_number: Annotated[Optional[StrictStr], Field(description="Vendor’s part number for the product.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Product Details

        Search all the product-related details.

        :param im_customer_number: Your unique Ingram Micro customer number (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems (required)
        :type im_correlation_id: str
        :param im_sender_id: Sender Identification text
        :type im_sender_id: str
        :param plan_name: Name of the subscription plan
        :type plan_name: str
        :param plan_id: Id of the subscription plan.   <span style='color:red'>To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.</span>
        :type plan_id: str
        :param vendor_part_number: Vendor’s part number for the product.
        :type vendor_part_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reseller_v6_productdetailcmp_serialize(
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            im_sender_id=im_sender_id,
            plan_name=plan_name,
            plan_id=plan_id,
            vendor_part_number=vendor_part_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductDetailResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_reseller_v6_productdetailcmp_serialize(
        self,
        im_customer_number,
        im_country_code,
        im_correlation_id,
        im_sender_id,
        plan_name,
        plan_id,
        vendor_part_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if plan_name is not None:
            
            _query_params.append(('planName', plan_name))
            
        if plan_id is not None:
            
            _query_params.append(('planId', plan_id))
            
        if vendor_part_number is not None:
            
            _query_params.append(('vendorPartNumber', vendor_part_number))
            
        # process the header parameters
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if im_sender_id is not None:
            _header_params['IM-SenderID'] = im_sender_id
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/resellers/v6/catalog/details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_reseller_v6_productsearch(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        page_number: Annotated[Optional[StrictInt], Field(description="Current page number. Default is 1")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of records required in the call - max records 100 per page")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Sender Identification text")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The SKU type of product. One of Physical, Digital, or Any.")] = None,
        has_discounts: Annotated[Optional[StrictStr], Field(description="Specifies if there are discounts available for the product.")] = None,
        vendor: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="The name of the vendor/manufacturer of the product.")] = None,
        vendor_part_number: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="The vendors part number for the product.")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Header to the API calls, the content will help us identify the response language.")] = None,
        vendor_number: Annotated[Optional[StrictStr], Field(description="Vendor number of the product")] = None,
        keyword: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name.")] = None,
        category: Annotated[Optional[StrictStr], Field(description="The category of the product. Example: Displays.")] = None,
        skip_authorisation: Annotated[Optional[StrictStr], Field(description="This parameter is True when you want Skip the authorization, so template will work like current B2b template.")] = None,
        group_name: Annotated[Optional[StrictStr], Field(description="Name of the Product Group")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="ID of the plan")] = None,
        show_group_info: Annotated[Optional[StrictBool], Field(description="In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductSearchResponse:
        """Search Products

        Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC

        :param im_customer_number: Your unique Ingram Micro customer number (required)
        :type im_customer_number: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems (required)
        :type im_correlation_id: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param page_number: Current page number. Default is 1
        :type page_number: int
        :param page_size: Number of records required in the call - max records 100 per page
        :type page_size: int
        :param im_sender_id: Sender Identification text
        :type im_sender_id: str
        :param type: The SKU type of product. One of Physical, Digital, or Any.
        :type type: str
        :param has_discounts: Specifies if there are discounts available for the product.
        :type has_discounts: str
        :param vendor: The name of the vendor/manufacturer of the product.
        :type vendor: List[str]
        :param vendor_part_number: The vendors part number for the product.
        :type vendor_part_number: List[str]
        :param accept_language: Header to the API calls, the content will help us identify the response language.
        :type accept_language: str
        :param vendor_number: Vendor number of the product
        :type vendor_number: str
        :param keyword: Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name.
        :type keyword: List[str]
        :param category: The category of the product. Example: Displays.
        :type category: str
        :param skip_authorisation: This parameter is True when you want Skip the authorization, so template will work like current B2b template.
        :type skip_authorisation: str
        :param group_name: Name of the Product Group
        :type group_name: str
        :param plan_id: ID of the plan
        :type plan_id: str
        :param show_group_info: In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group.
        :type show_group_info: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reseller_v6_productsearch_serialize(
            im_customer_number=im_customer_number,
            im_correlation_id=im_correlation_id,
            im_country_code=im_country_code,
            page_number=page_number,
            page_size=page_size,
            im_sender_id=im_sender_id,
            type=type,
            has_discounts=has_discounts,
            vendor=vendor,
            vendor_part_number=vendor_part_number,
            accept_language=accept_language,
            vendor_number=vendor_number,
            keyword=keyword,
            category=category,
            skip_authorisation=skip_authorisation,
            group_name=group_name,
            plan_id=plan_id,
            show_group_info=show_group_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductSearchResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_reseller_v6_productsearch_with_http_info(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        page_number: Annotated[Optional[StrictInt], Field(description="Current page number. Default is 1")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of records required in the call - max records 100 per page")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Sender Identification text")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The SKU type of product. One of Physical, Digital, or Any.")] = None,
        has_discounts: Annotated[Optional[StrictStr], Field(description="Specifies if there are discounts available for the product.")] = None,
        vendor: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="The name of the vendor/manufacturer of the product.")] = None,
        vendor_part_number: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="The vendors part number for the product.")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Header to the API calls, the content will help us identify the response language.")] = None,
        vendor_number: Annotated[Optional[StrictStr], Field(description="Vendor number of the product")] = None,
        keyword: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name.")] = None,
        category: Annotated[Optional[StrictStr], Field(description="The category of the product. Example: Displays.")] = None,
        skip_authorisation: Annotated[Optional[StrictStr], Field(description="This parameter is True when you want Skip the authorization, so template will work like current B2b template.")] = None,
        group_name: Annotated[Optional[StrictStr], Field(description="Name of the Product Group")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="ID of the plan")] = None,
        show_group_info: Annotated[Optional[StrictBool], Field(description="In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductSearchResponse]:
        """Search Products

        Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC

        :param im_customer_number: Your unique Ingram Micro customer number (required)
        :type im_customer_number: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems (required)
        :type im_correlation_id: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param page_number: Current page number. Default is 1
        :type page_number: int
        :param page_size: Number of records required in the call - max records 100 per page
        :type page_size: int
        :param im_sender_id: Sender Identification text
        :type im_sender_id: str
        :param type: The SKU type of product. One of Physical, Digital, or Any.
        :type type: str
        :param has_discounts: Specifies if there are discounts available for the product.
        :type has_discounts: str
        :param vendor: The name of the vendor/manufacturer of the product.
        :type vendor: List[str]
        :param vendor_part_number: The vendors part number for the product.
        :type vendor_part_number: List[str]
        :param accept_language: Header to the API calls, the content will help us identify the response language.
        :type accept_language: str
        :param vendor_number: Vendor number of the product
        :type vendor_number: str
        :param keyword: Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name.
        :type keyword: List[str]
        :param category: The category of the product. Example: Displays.
        :type category: str
        :param skip_authorisation: This parameter is True when you want Skip the authorization, so template will work like current B2b template.
        :type skip_authorisation: str
        :param group_name: Name of the Product Group
        :type group_name: str
        :param plan_id: ID of the plan
        :type plan_id: str
        :param show_group_info: In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group.
        :type show_group_info: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reseller_v6_productsearch_serialize(
            im_customer_number=im_customer_number,
            im_correlation_id=im_correlation_id,
            im_country_code=im_country_code,
            page_number=page_number,
            page_size=page_size,
            im_sender_id=im_sender_id,
            type=type,
            has_discounts=has_discounts,
            vendor=vendor,
            vendor_part_number=vendor_part_number,
            accept_language=accept_language,
            vendor_number=vendor_number,
            keyword=keyword,
            category=category,
            skip_authorisation=skip_authorisation,
            group_name=group_name,
            plan_id=plan_id,
            show_group_info=show_group_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductSearchResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_reseller_v6_productsearch_without_preload_content(
        self,
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction accross all the systems")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        page_number: Annotated[Optional[StrictInt], Field(description="Current page number. Default is 1")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of records required in the call - max records 100 per page")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Sender Identification text")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The SKU type of product. One of Physical, Digital, or Any.")] = None,
        has_discounts: Annotated[Optional[StrictStr], Field(description="Specifies if there are discounts available for the product.")] = None,
        vendor: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="The name of the vendor/manufacturer of the product.")] = None,
        vendor_part_number: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="The vendors part number for the product.")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Header to the API calls, the content will help us identify the response language.")] = None,
        vendor_number: Annotated[Optional[StrictStr], Field(description="Vendor number of the product")] = None,
        keyword: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name.")] = None,
        category: Annotated[Optional[StrictStr], Field(description="The category of the product. Example: Displays.")] = None,
        skip_authorisation: Annotated[Optional[StrictStr], Field(description="This parameter is True when you want Skip the authorization, so template will work like current B2b template.")] = None,
        group_name: Annotated[Optional[StrictStr], Field(description="Name of the Product Group")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="ID of the plan")] = None,
        show_group_info: Annotated[Optional[StrictBool], Field(description="In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Products

        Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC

        :param im_customer_number: Your unique Ingram Micro customer number (required)
        :type im_customer_number: str
        :param im_correlation_id: Unique transaction number to identify each transaction accross all the systems (required)
        :type im_correlation_id: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param page_number: Current page number. Default is 1
        :type page_number: int
        :param page_size: Number of records required in the call - max records 100 per page
        :type page_size: int
        :param im_sender_id: Sender Identification text
        :type im_sender_id: str
        :param type: The SKU type of product. One of Physical, Digital, or Any.
        :type type: str
        :param has_discounts: Specifies if there are discounts available for the product.
        :type has_discounts: str
        :param vendor: The name of the vendor/manufacturer of the product.
        :type vendor: List[str]
        :param vendor_part_number: The vendors part number for the product.
        :type vendor_part_number: List[str]
        :param accept_language: Header to the API calls, the content will help us identify the response language.
        :type accept_language: str
        :param vendor_number: Vendor number of the product
        :type vendor_number: str
        :param keyword: Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name.
        :type keyword: List[str]
        :param category: The category of the product. Example: Displays.
        :type category: str
        :param skip_authorisation: This parameter is True when you want Skip the authorization, so template will work like current B2b template.
        :type skip_authorisation: str
        :param group_name: Name of the Product Group
        :type group_name: str
        :param plan_id: ID of the plan
        :type plan_id: str
        :param show_group_info: In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group.
        :type show_group_info: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reseller_v6_productsearch_serialize(
            im_customer_number=im_customer_number,
            im_correlation_id=im_correlation_id,
            im_country_code=im_country_code,
            page_number=page_number,
            page_size=page_size,
            im_sender_id=im_sender_id,
            type=type,
            has_discounts=has_discounts,
            vendor=vendor,
            vendor_part_number=vendor_part_number,
            accept_language=accept_language,
            vendor_number=vendor_number,
            keyword=keyword,
            category=category,
            skip_authorisation=skip_authorisation,
            group_name=group_name,
            plan_id=plan_id,
            show_group_info=show_group_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductSearchResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_reseller_v6_productsearch_serialize(
        self,
        im_customer_number,
        im_correlation_id,
        im_country_code,
        page_number,
        page_size,
        im_sender_id,
        type,
        has_discounts,
        vendor,
        vendor_part_number,
        accept_language,
        vendor_number,
        keyword,
        category,
        skip_authorisation,
        group_name,
        plan_id,
        show_group_info,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'vendor': 'multi',
            'vendorPartNumber': 'multi',
            'keyword': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if has_discounts is not None:
            
            _query_params.append(('hasDiscounts', has_discounts))
            
        if vendor is not None:
            
            _query_params.append(('vendor', vendor))
            
        if vendor_part_number is not None:
            
            _query_params.append(('vendorPartNumber', vendor_part_number))
            
        if vendor_number is not None:
            
            _query_params.append(('vendorNumber', vendor_number))
            
        if keyword is not None:
            
            _query_params.append(('keyword', keyword))
            
        if category is not None:
            
            _query_params.append(('category', category))
            
        if skip_authorisation is not None:
            
            _query_params.append(('skipAuthorisation', skip_authorisation))
            
        if group_name is not None:
            
            _query_params.append(('groupName', group_name))
            
        if plan_id is not None:
            
            _query_params.append(('planID', plan_id))
            
        if show_group_info is not None:
            
            _query_params.append(('showGroupInfo', show_group_info))
            
        # process the header parameters
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_sender_id is not None:
            _header_params['IM-SenderID'] = im_sender_id
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/resellers/v6/catalog',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_priceandavailability(
        self,
        include_availability: Annotated[StrictBool, Field(description="Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details")],
        include_pricing: Annotated[StrictBool, Field(description="Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        include_product_attributes: Annotated[Optional[StrictBool], Field(description="Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details.")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        price_and_availability_request: Optional[PriceAndAvailabilityRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[PriceAndAvailabilityResponseInner]:
        """Price and Availability

        The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 

        :param include_availability: Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details (required)
        :type include_availability: bool
        :param include_pricing: Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details. (required)
        :type include_pricing: bool
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param include_product_attributes: Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details.
        :type include_product_attributes: bool
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param price_and_availability_request:
        :type price_and_availability_request: PriceAndAvailabilityRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_priceandavailability_serialize(
            include_availability=include_availability,
            include_pricing=include_pricing,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            include_product_attributes=include_product_attributes,
            im_sender_id=im_sender_id,
            price_and_availability_request=price_and_availability_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PriceAndAvailabilityResponseInner]",
            '207': "List[PriceAndAvailabilityResponseInner]",
            '400': "ErrorResponse",
            '401': None,
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_priceandavailability_with_http_info(
        self,
        include_availability: Annotated[StrictBool, Field(description="Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details")],
        include_pricing: Annotated[StrictBool, Field(description="Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        include_product_attributes: Annotated[Optional[StrictBool], Field(description="Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details.")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        price_and_availability_request: Optional[PriceAndAvailabilityRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[PriceAndAvailabilityResponseInner]]:
        """Price and Availability

        The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 

        :param include_availability: Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details (required)
        :type include_availability: bool
        :param include_pricing: Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details. (required)
        :type include_pricing: bool
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param include_product_attributes: Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details.
        :type include_product_attributes: bool
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param price_and_availability_request:
        :type price_and_availability_request: PriceAndAvailabilityRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_priceandavailability_serialize(
            include_availability=include_availability,
            include_pricing=include_pricing,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            include_product_attributes=include_product_attributes,
            im_sender_id=im_sender_id,
            price_and_availability_request=price_and_availability_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PriceAndAvailabilityResponseInner]",
            '207': "List[PriceAndAvailabilityResponseInner]",
            '400': "ErrorResponse",
            '401': None,
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_priceandavailability_without_preload_content(
        self,
        include_availability: Annotated[StrictBool, Field(description="Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details")],
        include_pricing: Annotated[StrictBool, Field(description="Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details.")],
        im_customer_number: Annotated[str, Field(strict=True, max_length=10, description="Your unique Ingram Micro customer number.")],
        im_country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="Two-character ISO country code.")],
        im_correlation_id: Annotated[str, Field(strict=True, max_length=32, description="Unique transaction number to identify each transaction across all the systems.")],
        include_product_attributes: Annotated[Optional[StrictBool], Field(description="Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details.")] = None,
        im_sender_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Unique value used to identify the sender of the transaction. Example: MyCompany")] = None,
        price_and_availability_request: Optional[PriceAndAvailabilityRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Price and Availability

        The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 

        :param include_availability: Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details (required)
        :type include_availability: bool
        :param include_pricing: Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details. (required)
        :type include_pricing: bool
        :param im_customer_number: Your unique Ingram Micro customer number. (required)
        :type im_customer_number: str
        :param im_country_code: Two-character ISO country code. (required)
        :type im_country_code: str
        :param im_correlation_id: Unique transaction number to identify each transaction across all the systems. (required)
        :type im_correlation_id: str
        :param include_product_attributes: Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details.
        :type include_product_attributes: bool
        :param im_sender_id: Unique value used to identify the sender of the transaction. Example: MyCompany
        :type im_sender_id: str
        :param price_and_availability_request:
        :type price_and_availability_request: PriceAndAvailabilityRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_priceandavailability_serialize(
            include_availability=include_availability,
            include_pricing=include_pricing,
            im_customer_number=im_customer_number,
            im_country_code=im_country_code,
            im_correlation_id=im_correlation_id,
            include_product_attributes=include_product_attributes,
            im_sender_id=im_sender_id,
            price_and_availability_request=price_and_availability_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PriceAndAvailabilityResponseInner]",
            '207': "List[PriceAndAvailabilityResponseInner]",
            '400': "ErrorResponse",
            '401': None,
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_priceandavailability_serialize(
        self,
        include_availability,
        include_pricing,
        im_customer_number,
        im_country_code,
        im_correlation_id,
        include_product_attributes,
        im_sender_id,
        price_and_availability_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if include_availability is not None:
            
            _query_params.append(('includeAvailability', include_availability))
            
        if include_pricing is not None:
            
            _query_params.append(('includePricing', include_pricing))
            
        if include_product_attributes is not None:
            
            _query_params.append(('includeProductAttributes', include_product_attributes))
            
        # process the header parameters
        if im_customer_number is not None:
            _header_params['IM-CustomerNumber'] = im_customer_number
        if im_country_code is not None:
            _header_params['IM-CountryCode'] = im_country_code
        if im_correlation_id is not None:
            _header_params['IM-CorrelationID'] = im_correlation_id
        if im_sender_id is not None:
            _header_params['IM-SenderID'] = im_sender_id
        # process the form parameters
        # process the body parameter
        if price_and_availability_request is not None:
            _body_params = price_and_availability_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'application'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/resellers/v6/catalog/priceandavailability',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


