name: Publish Python Package to PyPI V@

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write           # Required for committing version changes
      pull-requests: write     # Required for creating pull requests (optional)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0         # Fetch full history for accurate versioning

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Specify desired Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine --no-cache-dir

    - name: Get current version from setup.py
      id: get_version
      run: |
        if [ ! -f setup.py ]; then
          echo "Error: setup.py not found"
          exit 1
        fi
        CURRENT_VERSION=$(grep -oP "version=['\"]\K[^'\"]+(?=['\"])" setup.py)
        if [ -z "$CURRENT_VERSION" ]; then
          echo "Error: Version not found in setup.py"
          exit 1
        fi
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: bump_version
      run: |
        CURRENT_VERSION=${{ steps.get_version.outputs.current_version }}
        BUMP_TYPE=${{ github.event.inputs.bump_type }}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        if [ "$BUMP_TYPE" = "major" ]; then
          NEW_VERSION=$((MAJOR + 1)).0.0
        elif [ "$BUMP_TYPE" = "minor" ]; then
          NEW_VERSION=$MAJOR.$((MINOR + 1)).0
        elif [ "$BUMP_TYPE" = "patch" ]; then
          NEW_VERSION=$MAJOR.$MINOR.$((PATCH + 1))
        else
          echo "Error: Invalid bump type"
          exit 1
        fi
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update version in setup.py
      run: |
        NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
        sed -i "s/version=['\"].*['\"]/version='$NEW_VERSION'/" setup.py

    - name: Update download URL in setup.py
      run: |
        NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
        DOWNLOAD_URL="https://github.com/${{ github.repository }}/archive/v${NEW_VERSION}.tar.gz"
        sed -i "s|download_url=['\"].*['\"]|download_url='$DOWNLOAD_URL'|" setup.py

    - name: Commit version changes
      run: |
        git config --global user.email "${{ secrets.ADMIN_EMAIL }}"
        git config --global user.name "${{ secrets.ORG_NAME }}"
        git add setup.py
        if git diff --staged --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }} (${{ github.event.inputs.bump_type }})"
          git push
        fi

    - name: Build package
      run: python -m build

    - name: Check package
      run: python -m twine check dist/*

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
        repository-url: https://upload.pypi.org/legacy/
        skip-existing: true