name: Python Package Publishing (V2)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter the new version for the package'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build --no-cache-dir

    - name: Update version in pyproject.toml
      run: |
        sed -i "s/^version = \".*\"/version = \"${{ github.event.inputs.version }}\"/" pyproject.toml

    - name: Update download URL in pyproject.toml
      run: |
        latest_version="${{ github.event.inputs.version }}"
        latest_download_url="https://github.com/ingrammicro-xvantage/xi-sdk-resellers-python/archive/${latest_version}.tar.gz"
        sed -i "s|Download = \".*\"|Download = \"${latest_download_url}\"|" pyproject.toml

    - name: Commit and push changes
      run: |
        git config --global user.email "${{ secrets.ADMIN_EMAIL }}"
        git config --global user.name "${{ secrets.ORG_NAME }}"
        git add pyproject.toml
        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Bump version to ${{ github.event.inputs.version }}"
          git push https://${{ secrets.WORKFLOW_TOKEN }}@github.com/ingrammicro-xvantage/xi-sdk-resellers-python main
        fi

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ github.event.inputs.version }}"
        name: "v${{ github.event.inputs.version }} Release"
        body: "Published Python SDK version ${{ github.event.inputs.version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Deployment
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="v${{ github.event.inputs.version }}"
        gh deployment create "$TAG_NAME" \
          --ref "$GITHUB_SHA" \
          --description "Published Python SDK version $TAG_NAME" \
          --environment "production" \
          --auto-inactive
